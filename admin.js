// admin.js
// =============================================
// –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ö–ê–°–¢–û–ú–ù–´–ú –ö–£–†–°–û–†–û–ú
// =============================================

class AdminPanel {
    constructor() {
        this.isAuthenticated = false;
        this.projects = [];
        this.currentEditingId = null;
        this.categoryChart = null;
        this.customCursor = null;
        this.init();
    }

    init() {
        this.initCustomCursor();
        this.initTheme();
        this.initNavigation();
        this.initLogin();
        this.loadProjects();
        this.initProjectForm();
        this.initSettings();
        this.initPageProgress();
        this.updateAdminStatus();
        console.log('üöÄ Admin panel initialized');
    }

    // =============================================
    // –ö–ê–°–¢–û–ú–ù–´–ô –ö–£–†–°–û–† –î–õ–Ø –ê–î–ú–ò–ù–ö–ò
    // =============================================
    initCustomCursor() {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫—É—Ä—Å–æ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!document.getElementById('customCursor')) {
            const cursor = document.createElement('div');
            cursor.id = 'customCursor';
            cursor.className = 'custom-cursor';
            document.body.appendChild(cursor);
        }
        
        this.customCursor = new AdminCustomCursor();
    }

    // =============================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–ú–û–ô
    // =============================================
    initTheme() {
        const themeToggle = document.getElementById('themeToggle');
        const currentTheme = localStorage.getItem('theme') || 'dark';
        
        document.documentElement.setAttribute('data-theme', currentTheme);
        this.updateThemeIcon(currentTheme);

        themeToggle.addEventListener('click', () => {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            this.updateThemeIcon(newTheme);
            this.showNotification(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newTheme === 'dark' ? '—Ç—ë–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é'}!`, 'success');
        });
    }

    updateThemeIcon(theme) {
        const icon = document.querySelector('#themeToggle i');
        icon.className = theme === 'dark' ? 'fas fa-moon' : 'fas fa-sun';
    }

    // =============================================
    // –ù–ê–í–ò–ì–ê–¶–ò–Ø –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –ë–£–†–ì–ï–† –ú–ï–ù–Æ
    // =============================================
    initNavigation() {
        const mobileMenuBtn = document.getElementById('mobileMenuBtn');
        const navbar = document.getElementById('navbar');
        const navLinks = document.querySelectorAll('.nav-link');

        if (mobileMenuBtn && navbar) {
            mobileMenuBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                navbar.classList.toggle('active');
                mobileMenuBtn.innerHTML = navbar.classList.contains('active') 
                    ? '<i class="fas fa-times"></i>' 
                    : '<i class="fas fa-bars"></i>';
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
            navLinks.forEach(link => {
                link.addEventListener('click', () => {
                    if (navbar.classList.contains('active')) {
                        navbar.classList.remove('active');
                        mobileMenuBtn.innerHTML = '<i class="fas fa-bars"></i>';
                    }
                });
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏
            document.addEventListener('click', (e) => {
                if (navbar.classList.contains('active') && 
                    !navbar.contains(e.target) && 
                    !mobileMenuBtn.contains(e.target)) {
                    navbar.classList.remove('active');
                    mobileMenuBtn.innerHTML = '<i class="fas fa-bars"></i>';
                }
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            window.addEventListener('resize', () => {
                if (window.innerWidth > 768 && navbar.classList.contains('active')) {
                    navbar.classList.remove('active');
                    mobileMenuBtn.innerHTML = '<i class="fas fa-bars"></i>';
                }
            });
        }

        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                if (link.getAttribute('href') === 'index.html') return;
                
                if (!this.isAuthenticated && !link.getAttribute('href').includes('login')) {
                    e.preventDefault();
                    this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
                    this.showSection('login');
                    return;
                }

                const target = link.getAttribute('href').substring(1);
                this.showSection(target);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if (target === 'statistics') {
                    this.updateStatistics();
                    this.initCharts();
                }
                
                if (navbar) {
                    navbar.classList.remove('active');
                    if (mobileMenuBtn) {
                        mobileMenuBtn.innerHTML = '<i class="fas fa-bars"></i>';
                    }
                }
            });
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –ª–æ–≥–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.showSection('login');
    }

    // =============================================
    // –ü–†–û–ì–†–ï–°–° –ë–ê–† –°–¢–†–ê–ù–ò–¶–´
    // =============================================
    initPageProgress() {
        const progressBar = document.querySelector('.progress-bar');
        if (!progressBar) return;

        window.addEventListener('scroll', () => {
            const windowHeight = window.innerHeight;
            const documentHeight = document.documentElement.scrollHeight - windowHeight;
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            const progress = (scrollTop / documentHeight) * 100;
            
            progressBar.style.width = progress + '%';
        });
    }

    // =============================================
    // –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
    // =============================================
    initLogin() {
        const loginForm = document.getElementById('adminLoginForm');
        const adminPassword = localStorage.getItem('adminPassword') || 'admin123';

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è
        const currentPasswordElement = document.getElementById('currentPassword');
        if (currentPasswordElement) {
            currentPasswordElement.textContent = adminPassword;
        }

        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const password = document.getElementById('adminPassword').value;
            
            if (password === adminPassword) {
                this.isAuthenticated = true;
                this.showSection('projects');
                this.showNotification('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!', 'success');
                this.updateAdminStatus();
                loginForm.reset();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
                this.updateStatistics();
            } else {
                this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 'error');
                document.getElementById('adminPassword').value = '';
                document.getElementById('adminPassword').focus();
            }
        });
    }

    updateAdminStatus() {
        const statusElement = document.getElementById('adminStatus');
        if (statusElement) {
            if (this.isAuthenticated) {
                statusElement.className = 'status-online';
                statusElement.innerHTML = '<i class="fas fa-circle"></i> –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω';
            } else {
                statusElement.className = 'status-offline';
                statusElement.innerHTML = '<i class="fas fa-circle"></i> –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω';
            }
        }
    }

    // =============================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–ö–¶–ò–Ø–ú–ò
    // =============================================
    showSection(sectionName) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        document.querySelectorAll('.admin-section').forEach(section => {
            section.style.display = 'none';
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
        const targetSection = document.getElementById(sectionName);
        if (targetSection) {
            targetSection.style.display = 'block';
            
            // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
            setTimeout(() => {
                targetSection.style.opacity = '1';
                targetSection.style.transform = 'translateY(0)';
            }, 50);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${sectionName}`) {
                link.classList.add('active');
            }
        });

        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤–µ—Ä—Ö—É
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    // =============================================
    // –§–û–†–ú–ê –ü–†–û–ï–ö–¢–û–í
    // =============================================
    initProjectForm() {
        const projectForm = document.getElementById('projectForm');
        
        projectForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            if (!this.isAuthenticated) {
                this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
                this.showSection('login');
                return;
            }

            const projectData = {
                id: this.currentEditingId || Date.now(),
                title: document.getElementById('projectTitle').value,
                category: document.getElementById('projectCategory').value,
                description: document.getElementById('projectDescription').value,
                image: document.getElementById('projectImage').value,
                technologies: document.getElementById('projectTechnologies').value.split(',').map(tech => tech.trim()),
                demoLink: document.getElementById('projectDemo').value,
                githubLink: document.getElementById('projectGithub').value,
                features: ["–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]
            };

            if (this.currentEditingId) {
                this.updateProject(projectData);
            } else {
                this.addProject(projectData);
            }
            
            projectForm.reset();
            this.currentEditingId = null;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            const submitBtn = projectForm.querySelector('button[type="submit"]');
            submitBtn.innerHTML = '<i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç';
        });
    }

    // =============================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê–ú–ò
    // =============================================
    async loadProjects() {
        try {
            const savedProjects = localStorage.getItem('portfolioProjects');
            
            if (savedProjects && savedProjects !== 'null' && savedProjects !== 'undefined') {
                try {
                    this.projects = JSON.parse(savedProjects);
                    console.log(`üìÅ Loaded ${this.projects.length} projects from localStorage`);
                    
                    if (!Array.isArray(this.projects) || this.projects.length === 0) {
                        throw new Error('Invalid projects data');
                    }
                } catch (error) {
                    console.error('‚ùå Error loading projects from localStorage:', error);
                    this.projects = this.getDefaultProjects();
                    this.saveProjects();
                }
            } else {
                console.log('üìÅ No saved projects found, loading defaults');
                this.projects = this.getDefaultProjects();
                this.saveProjects();
            }
            
            this.renderProjects();
            this.updateStatistics();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
            this.projects = this.getDefaultProjects();
            this.renderProjects();
            this.updateStatistics();
        }
    }

    getDefaultProjects() {
        return [
            {
                "id": 1,
                "category": "web",
                "title": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω Moscow RP",
                "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π, —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ GTA 5 RP.",
                "image": "project1.png",
                "demoLink": "https://districkov.github.io/Moscow___RP/",
                "githubLink": "https://github.com/Districkov/Moscow___RP",
                "technologies": ["HTML5", "CSS3", "JavaScript", "Responsive Design"],
                "features": ["–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫", "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω", "–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫"]
            },
            {
                "id": 2,
                "category": "app", 
                "title": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Pyrometer",
                "description": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
                "image": "project2.png",
                "demoLink": "https://pyrometer.tilda.ws/",
                "githubLink": "",
                "technologies": ["React", "Node.js", "WebSocket", "REST API"],
                "features": ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", "–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]
            },
            {
                "id": 3,
                "category": "design",
                "title": "–î–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞ Astra GTA 5 RP", 
                "description": "–°–æ–∑–¥–∞–Ω–∏–µ UI/UX –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ GTA 5 RP —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.",
                "image": "project3.png",
                "demoLink": "https://www.figma.com/design/XbDdfTxHWDtniMplxhkvcu/Astra-Project-%7C-Figma?node-id=310-3098&p=f&t=t1uig8AF5IQqlOv7-0",
                "githubLink": "",
                "technologies": ["Figma", "UI/UX Design", "Prototyping", "Design Systems"],
                "features": ["–î–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞", "–ü—Ä–æ—Ç–æ—Ç–∏–ø—ã", "User Flow", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω"]
            }
        ];
    }

    renderProjects() {
        const projectsList = document.getElementById('projectsList');
        const projectsCount = document.getElementById('projectsCount');
        
        if (!projectsList) return;

        if (this.projects.length === 0) {
            projectsList.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-folder-open"></i>
                    <h4>–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</h4>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É –≤—ã—à–µ</p>
                </div>
            `;
        } else {
            projectsList.innerHTML = this.projects.map(project => `
                <div class="project-item" data-project-id="${project.id}">
                    <div class="project-info">
                        <div class="project-main">
                            <h4>${project.title}</h4>
                            <span class="project-category">${this.getCategoryName(project.category)}</span>
                        </div>
                        <div class="project-meta">
                            <small>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: ${project.technologies.slice(0, 3).join(', ')}</small>
                            <small>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${project.image}</small>
                        </div>
                    </div>
                    <div class="project-actions">
                        <button class="btn btn-small" onclick="admin.editProject(${project.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-small btn-outline" onclick="admin.deleteProject(${project.id})" title="–£–¥–∞–ª–∏—Ç—å">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        if (projectsCount) {
            projectsCount.textContent = this.projects.length;
        }

        // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        this.updateStatistics();
    }

    addProject(projectData) {
        const formattedProject = {
            id: projectData.id,
            category: projectData.category,
            title: projectData.title,
            description: projectData.description,
            image: projectData.image,
            demoLink: projectData.demoLink || '',
            githubLink: projectData.githubLink || '',
            technologies: projectData.technologies || [],
            features: projectData.features || []
        };

        this.projects.unshift(formattedProject);
        this.saveProjects();
        this.renderProjects();
        this.showNotification('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success');
    }

    updateProject(projectData) {
        const index = this.projects.findIndex(p => p.id === projectData.id);
        if (index !== -1) {
            this.projects[index] = {
                id: projectData.id,
                category: projectData.category,
                title: projectData.title,
                description: projectData.description,
                image: projectData.image,
                demoLink: projectData.demoLink || '',
                githubLink: projectData.githubLink || '',
                technologies: projectData.technologies || [],
                features: this.projects[index].features || []
            };
            
            this.saveProjects();
            this.renderProjects();
            this.showNotification('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
        }
    }

    editProject(projectId) {
        const project = this.projects.find(p => p.id === projectId);
        if (!project) return;

        document.getElementById('projectTitle').value = project.title;
        document.getElementById('projectCategory').value = project.category;
        document.getElementById('projectDescription').value = project.description;
        document.getElementById('projectImage').value = project.image;
        document.getElementById('projectTechnologies').value = project.technologies.join(', ');
        document.getElementById('projectDemo').value = project.demoLink || '';
        document.getElementById('projectGithub').value = project.githubLink || '';

        this.currentEditingId = projectId;

        const submitBtn = document.querySelector('#projectForm button[type="submit"]');
        submitBtn.innerHTML = '<i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';

        this.showNotification('–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞', 'info');
        
        document.getElementById('projectForm').scrollIntoView({ behavior: 'smooth' });
    }

    deleteProject(projectId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?')) {
            return;
        }

        this.projects = this.projects.filter(p => p.id !== projectId);
        this.saveProjects();
        this.renderProjects();
        this.showNotification('–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω!', 'success');
    }

    saveProjects() {
        localStorage.setItem('portfolioProjects', JSON.stringify(this.projects));
        console.log('üíæ Projects saved to localStorage:', this.projects.length);
    }

    getCategoryName(category) {
        const categories = {
            'web': 'üåê –í–µ–±-—Å–∞–π—Ç',
            'app': 'üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            'design': 'üé® –î–∏–∑–∞–π–Ω'
        };
        return categories[category] || category;
    }

    // =============================================
    // –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ì–†–ê–§–ò–ö–ò
    // =============================================
    updateStatistics() {
        console.log('üìä Updating statistics...');
        
        const totalProjects = this.projects.length;
        const webProjects = this.projects.filter(p => p.category === 'web').length;
        const appProjects = this.projects.filter(p => p.category === 'app').length;
        const designProjects = this.projects.filter(p => p.category === 'design').length;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
        const totalEl = document.getElementById('totalProjects');
        const webEl = document.getElementById('webProjects');
        const appEl = document.getElementById('appProjects');
        const designEl = document.getElementById('designProjects');

        if (totalEl) totalEl.textContent = totalProjects;
        if (webEl) webEl.textContent = webProjects;
        if (appEl) appEl.textContent = appProjects;
        if (designEl) designEl.textContent = designProjects;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsTotalEl = document.getElementById('statsTotalProjects');
        const statsWebEl = document.getElementById('statsWebProjects');
        const statsAppEl = document.getElementById('statsAppProjects');
        const statsDesignEl = document.getElementById('statsDesignProjects');

        if (statsTotalEl) statsTotalEl.textContent = totalProjects;
        if (statsWebEl) statsWebEl.textContent = webProjects;
        if (statsAppEl) statsAppEl.textContent = appProjects;
        if (statsDesignEl) statsDesignEl.textContent = designProjects;

        console.log('üìä Statistics updated:', { totalProjects, webProjects, appProjects, designProjects });
    }

    initCharts() {
        this.updateCategoryChart();
    }

    updateCategoryChart() {
        const ctx = document.getElementById('categoryChartCanvas');
        if (!ctx) return;

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (this.categoryChart) {
            this.categoryChart.destroy();
        }

        const webProjects = this.projects.filter(p => p.category === 'web').length;
        const appProjects = this.projects.filter(p => p.category === 'app').length;
        const designProjects = this.projects.filter(p => p.category === 'design').length;

        this.categoryChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['–í–µ–±-—Å–∞–π—Ç—ã', '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è', '–î–∏–∑–∞–π–Ω'],
                datasets: [{
                    data: [webProjects, appProjects, designProjects],
                    backgroundColor: [
                        'rgba(124, 252, 0, 0.8)',
                        'rgba(124, 252, 0, 0.6)',
                        'rgba(124, 252, 0, 0.4)'
                    ],
                    borderColor: [
                        'rgba(124, 252, 0, 1)',
                        'rgba(124, 252, 0, 1)',
                        'rgba(124, 252, 0, 1)'
                    ],
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            color: 'var(--light)',
                            font: {
                                size: 12
                            }
                        }
                    },
                    title: {
                        display: true,
                        text: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                        color: 'var(--light)',
                        font: {
                            size: 16
                        }
                    }
                }
            }
        });
    }

    // =============================================
    // –ù–ê–°–¢–†–û–ô–ö–ò
    // =============================================
    initSettings() {
        const settingsForm = document.getElementById('settingsForm');
        const musicEnabled = localStorage.getItem('musicEnabled') !== 'false';
        const notificationsEnabled = localStorage.getItem('notificationsEnabled') !== 'false';
        
        document.getElementById('musicEnabled').checked = musicEnabled;
        document.getElementById('notificationsEnabled').checked = notificationsEnabled;

        settingsForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const newPassword = document.getElementById('adminPasswordChange').value;
            if (newPassword) {
                localStorage.setItem('adminPassword', newPassword);
                document.getElementById('adminPasswordChange').value = '';
                document.getElementById('currentPassword').textContent = newPassword;
                this.showNotification('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', 'success');
            }

            const musicEnabled = document.getElementById('musicEnabled').checked;
            const notificationsEnabled = document.getElementById('notificationsEnabled').checked;
            
            localStorage.setItem('musicEnabled', musicEnabled.toString());
            localStorage.setItem('notificationsEnabled', notificationsEnabled.toString());

            this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
        });
    }

    // =============================================
    // –≠–ö–°–ü–û–†–¢/–ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–•
    // =============================================
    exportProjects() {
        if (!this.isAuthenticated) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
            return;
        }

        const dataStr = JSON.stringify(this.projects, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `portfolio-projects-${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        
        this.showNotification('–ü—Ä–æ–µ–∫—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
    }

    importProjects() {
        if (!this.isAuthenticated) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
            return;
        }

        const fileInput = document.getElementById('importFile');
        fileInput.onchange = (e) => {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = (event) => {
                try {
                    const importedProjects = JSON.parse(event.target.result);
                    
                    if (Array.isArray(importedProjects)) {
                        if (confirm(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ${importedProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤? –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã.`)) {
                            this.projects = importedProjects;
                            this.saveProjects();
                            this.renderProjects();
                            this.showNotification(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤!`, 'success');
                        }
                    } else {
                        this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞', 'error');
                    }
                } catch (error) {
                    this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞', 'error');
                    console.error('Import error:', error);
                }
            };
            reader.readAsText(file);
        };
        
        fileInput.click();
    }

    restoreProjects() {
        if (!this.isAuthenticated) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
            return;
        }

        if (confirm('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã? –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã.')) {
            this.projects = this.getDefaultProjects();
            this.saveProjects();
            this.renderProjects();
            this.showNotification('–ü—Ä–æ–µ–∫—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!', 'success');
        }
    }

    clearAllData() {
        if (!this.isAuthenticated) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'warning');
            return;
        }

        if (confirm('–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
            localStorage.removeItem('portfolioProjects');
            localStorage.removeItem('adminPassword');
            localStorage.removeItem('musicEnabled');
            localStorage.removeItem('notificationsEnabled');
            
            this.projects = this.getDefaultProjects();
            this.saveProjects();
            this.renderProjects();
            
            this.showNotification('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!', 'success');
        }
    }

    // =============================================
    // –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    // =============================================
    showNotification(message, type = 'info') {
        const notificationsEnabled = localStorage.getItem('notificationsEnabled') !== 'false';
        if (!notificationsEnabled && type !== 'error') return;

        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notification => {
            notification.remove();
        });

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas fa-${this.getNotificationIcon(type)}"></i>
                <span>${message}</span>
            </div>
        `;

        document.body.appendChild(notification);

        setTimeout(() => notification.classList.add('show'), 100);

        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }

    getNotificationIcon(type) {
        const icons = {
            'success': 'check-circle',
            'error': 'exclamation-circle',
            'warning': 'exclamation-triangle',
            'info': 'info-circle'
        };
        return icons[type] || 'info-circle';
    }
}

// =============================================
// –ö–ê–°–¢–û–ú–ù–´–ô –ö–£–†–°–û–† –î–õ–Ø –ê–î–ú–ò–ù–ö–ò
// =============================================
class AdminCustomCursor {
    constructor() {
        this.cursor = document.getElementById('customCursor');
        this.init();
    }

    init() {
        if (!this.cursor) {
            console.warn('Custom cursor element not found in admin');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É fine pointer (–Ω–µ —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
        if (window.matchMedia('(pointer: fine)').matches) {
            this.bindEvents();
            this.cursor.style.display = 'block';
        } else {
            this.cursor.style.display = 'none';
        }
    }

    bindEvents() {
        document.addEventListener('mousemove', (e) => {
            this.moveCursor(e);
        });

        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∞–¥–º–∏–Ω–∫–µ
        const hoverElements = document.querySelectorAll(
            'a, button, .btn, .admin-card, .project-item, .filter-btn, input, textarea, select, .mobile-menu-btn, .theme-toggle, .lang-btn, .form-group input, .form-group textarea, .form-group select'
        );
        
        hoverElements.forEach(el => {
            el.addEventListener('mouseenter', () => {
                this.cursor.classList.add('hover');
            });
            
            el.addEventListener('mouseleave', () => {
                this.cursor.classList.remove('hover');
            });
        });

        // –ö–ª–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç
        document.addEventListener('mousedown', () => {
            this.cursor.classList.add('click');
        });

        document.addEventListener('mouseup', () => {
            this.cursor.classList.remove('click');
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –∫–æ–≥–¥–∞ –º—ã—à—å –ø–æ–∫–∏–¥–∞–µ—Ç –æ–∫–Ω–æ
        document.addEventListener('mouseleave', () => {
            this.cursor.style.opacity = '0';
        });

        document.addEventListener('mouseenter', () => {
            this.cursor.style.opacity = '1';
        });
    }

    moveCursor(e) {
        if (this.cursor.style.display !== 'none') {
            this.cursor.style.left = e.clientX + 'px';
            this.cursor.style.top = e.clientY + 'px';
        }
    }
}

// =============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò
// =============================================
let admin;

document.addEventListener('DOMContentLoaded', () => {
    admin = new AdminPanel();
});

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
window.admin = admin;