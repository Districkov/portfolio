// =============================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// =============================================
const CONFIG = {
    enable3D: false,
    musicEnabled: true,
    particlesEnabled: true,
    customCursor: true
};

let projects = [];
let threeScene = null;

// =============================================
// –ö–ê–°–¢–û–ú–ù–´–ô –ö–£–†–°–û–†
// =============================================
class CustomCursor {
    constructor() {
        this.cursor = document.getElementById('customCursor');
        this.init();
    }

    init() {
        if (!this.cursor) {
            console.warn('Custom cursor element not found');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É fine pointer (–Ω–µ —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
        if (window.matchMedia('(pointer: fine)').matches && CONFIG.customCursor) {
            this.bindEvents();
            this.cursor.style.display = 'block';
        } else {
            this.cursor.style.display = 'none';
        }
    }

    bindEvents() {
        document.addEventListener('mousemove', (e) => {
            this.moveCursor(e);
        });

        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const hoverElements = document.querySelectorAll(
            'a, button, .btn, .service-card, .portfolio-card, .filter-btn, input, textarea, select, .mobile-menu-btn, .theme-toggle'
        );
        
        hoverElements.forEach(el => {
            el.addEventListener('mouseenter', () => {
                this.cursor.classList.add('hover');
            });
            
            el.addEventListener('mouseleave', () => {
                this.cursor.classList.remove('hover');
            });
        });

        // –ö–ª–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç
        document.addEventListener('mousedown', () => {
            this.cursor.classList.add('click');
        });

        document.addEventListener('mouseup', () => {
            this.cursor.classList.remove('click');
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –∫–æ–≥–¥–∞ –º—ã—à—å –ø–æ–∫–∏–¥–∞–µ—Ç –æ–∫–Ω–æ
        document.addEventListener('mouseleave', () => {
            this.cursor.style.opacity = '0';
        });

        document.addEventListener('mouseenter', () => {
            this.cursor.style.opacity = '1';
        });
    }

    moveCursor(e) {
        if (this.cursor.style.display !== 'none') {
            this.cursor.style.left = e.clientX + 'px';
            this.cursor.style.top = e.clientY + 'px';
        }
    }

    // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫—É—Ä—Å–æ—Ä–∞
    toggle(enabled) {
        CONFIG.customCursor = enabled;
        if (enabled) {
            this.cursor.style.display = 'block';
        } else {
            this.cursor.style.display = 'none';
        }
    }
}

// =============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// =============================================
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Initializing portfolio application...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    initializeApp();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    loadProjects();
    
    console.log('‚úÖ Portfolio application initialized successfully!');
});

function initializeApp() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫—É—Ä—Å–æ—Ä–∞
    initCustomCursor();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
    initTheme();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∏
    initMusic();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initEventListeners();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
    initAnimations();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ–Ω–∞
    initEnhancedDynamicBackground();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    initPageProgress();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –º—É–∑—ã–∫–∏ –≤–Ω–∏–∑—É
    initBottomMusicButton();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    initEnhancedChatAssistant();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA
    initPWA();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
    initI18n();
}

function initCustomCursor() {
    window.customCursor = new CustomCursor();
}

// =============================================
// –ë–£–†–ì–ï–† –ú–ï–ù–Æ - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–û–ï
// =============================================
function initMobileMenu() {
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    const navbar = document.getElementById('navbar');
    const navList = navbar ? navbar.querySelector('ul') : null;
    
    if (!mobileMenuBtn || !navbar || !navList) {
        console.warn('Mobile menu elements not found');
        return;
    }

    console.log('üçî Mobile menu initialization started');

    function toggleMenu() {
        const isActive = navList.classList.contains('active');
        
        if (isActive) {
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
            navList.classList.remove('active');
            mobileMenuBtn.classList.remove('active');
            mobileMenuBtn.innerHTML = '<i class="fas fa-bars"></i>';
            document.body.style.overflow = '';
            console.log('üì± Mobile menu closed');
        } else {
            // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
            navList.classList.add('active');
            mobileMenuBtn.classList.add('active');
            mobileMenuBtn.innerHTML = '<i class="fas fa-times"></i>';
            document.body.style.overflow = 'hidden';
            console.log('üì± Mobile menu opened');
        }
    }

    function closeMenu() {
        navList.classList.remove('active');
        mobileMenuBtn.classList.remove('active');
        mobileMenuBtn.innerHTML = '<i class="fas fa-bars"></i>';
        document.body.style.overflow = '';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –±—É—Ä–≥–µ—Ä-–∫–Ω–æ–ø–∫–µ
    mobileMenuBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        e.preventDefault();
        toggleMenu();
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
    const navLinks = navList.querySelectorAll('a');
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            // –î–ª—è —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å–∫—Ä–æ–ª–ª –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            if (link.getAttribute('href').startsWith('#')) {
                e.preventDefault();
                const targetId = link.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                
                if (targetElement) {
                    targetElement.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
                setTimeout(closeMenu, 300);
            } else {
                closeMenu();
            }
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏
    document.addEventListener('click', function(e) {
        if (!navbar.contains(e.target) && !mobileMenuBtn.contains(e.target)) {
            closeMenu();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeMenu();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ (–Ω–∞ –¥–µ—Å–∫—Ç–æ–ø)
    window.addEventListener('resize', function() {
        if (window.innerWidth > 768) {
            closeMenu();
        }
    });

    console.log('‚úÖ Mobile menu initialized successfully');
}

// =============================================
// –ù–ê–í–ò–ì–ê–¶–ò–Ø –ò –ü–†–û–ö–†–£–¢–ö–ê
// =============================================
function initNavigation() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    initMobileMenu();

    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-link');

    // –ê–∫—Ç–∏–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    function updateActiveNavLink() {
        let current = '';
        const scrollPos = window.pageYOffset + 100;

        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.clientHeight;
            
            if (scrollPos >= sectionTop && scrollPos < sectionTop + sectionHeight) {
                current = section.getAttribute('id');
            }
        });

        navLinks.forEach(link => {
            link.classList.remove('active');
            const href = link.getAttribute('href');
            if (href && href.includes(current)) {
                link.classList.add('active');
            }
        });
    }

    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            const href = this.getAttribute('href');
            
            if (href === '#') return;
            
            const target = document.querySelector(href);
            if (target) {
                e.preventDefault();
                
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                history.pushState(null, null, href);
            }
        });
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    window.addEventListener('scroll', updateActiveNavLink);
    updateActiveNavLink(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
}

// =============================================
// PWA –§–£–ù–ö–¶–ò–û–ù–ê–õ
// =============================================
function initPWA() {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/sw.js')
            .then(registration => {
                console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
            })
            .catch(error => {
                console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
            });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
    let deferredPrompt;
    const installBtn = document.getElementById('pwaInstallBtn');

    window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredPrompt = e;
        
        if (installBtn) {
            installBtn.style.display = 'flex';
            installBtn.addEventListener('click', installPWA);
        }
    });

    function installPWA() {
        if (!deferredPrompt) return;

        deferredPrompt.prompt();
        deferredPrompt.userChoice.then((choiceResult) => {
            if (choiceResult.outcome === 'accepted') {
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É');
                if (installBtn) installBtn.style.display = 'none';
            }
            deferredPrompt = null;
        });
    }

    window.addEventListener('appinstalled', () => {
        console.log('‚úÖ PWA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        if (installBtn) installBtn.style.display = 'none';
        showNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
    });
}

// =============================================
// –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–û–°–¢–¨
// =============================================
function initI18n() {
    const langSwitcher = document.getElementById('languageSwitcher');
    if (!langSwitcher) return;

    const currentLang = localStorage.getItem('portfolioLang') || 'ru';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —è–∑—ã–∫–∞
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.classList.toggle('active', btn.dataset.lang === currentLang);
        btn.addEventListener('click', () => {
            switchLanguage(btn.dataset.lang);
        });
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
    applyLanguage(currentLang);
}

function switchLanguage(lang) {
    localStorage.setItem('portfolioLang', lang);
    applyLanguage(lang);
    showNotification(`–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${getLanguageName(lang)}`, 'success');
}

function applyLanguage(lang) {
    document.documentElement.lang = lang;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —è–∑—ã–∫–∞
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.classList.toggle('active', btn.dataset.lang === lang);
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
    updateUITexts(lang);
}

function getLanguageName(lang) {
    const names = {
        'ru': '–†—É—Å—Å–∫–∏–π',
        'en': 'English',
        'es': 'Espa√±ol'
    };
    return names[lang] || lang;
}

function updateUITexts(lang) {
    const translations = {
        ru: {
            'loading': '–ó–∞–≥—Ä—É–∑–∫–∞...',
            'nav.home': '–ì–ª–∞–≤–Ω–∞—è',
            'nav.about': '–û–±–æ –º–Ω–µ',
            'nav.services': '–£—Å–ª—É–≥–∏',
            'nav.portfolio': '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
            'nav.contact': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
            'nav.admin': '–ê–¥–º–∏–Ω–∫–∞',
            'hero.title': '–ü—Ä–∏–≤–µ—Ç, —è ',
            'hero.subtitle': '–§—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ–ø—ã—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
            'hero.works': '–ú–æ–∏ —Ä–∞–±–æ—Ç—ã',
            'hero.contact': '–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π'
        },
        en: {
            'loading': 'Loading...',
            'nav.home': 'Home',
            'nav.about': 'About',
            'nav.services': 'Services',
            'nav.portfolio': 'Portfolio',
            'nav.contact': 'Contact',
            'nav.admin': 'Admin',
            'hero.title': 'Hello, I\'m ',
            'hero.subtitle': 'Frontend developer with experience in creating modern web applications',
            'hero.works': 'My Works',
            'hero.contact': 'Contact Me'
        },
        es: {
            'loading': 'Cargando...',
            'nav.home': 'Inicio',
            'nav.about': 'Sobre M√≠',
            'nav.services': 'Servicios',
            'nav.portfolio': 'Portafolio',
            'nav.contact': 'Contacto',
            'nav.admin': 'Admin',
            'hero.title': 'Hola, soy ',
            'hero.subtitle': 'Desarrollador frontend con experiencia en crear aplicaciones web modernas',
            'hero.works': 'Mis Trabajos',
            'hero.contact': 'Cont√°ctame'
        }
    };

    const texts = translations[lang] || translations.ru;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã
    document.querySelectorAll('[data-i18n]').forEach(element => {
        const key = element.getAttribute('data-i18n');
        if (texts[key]) {
            element.textContent = texts[key];
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º placeholder'—ã
    document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
        const key = element.getAttribute('data-i18n-placeholder');
        if (texts[key]) {
            element.placeholder = texts[key];
        }
    });
}

// =============================================
// –ó–ê–ì–†–£–ó–ö–ê –ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–û–í
// =============================================
function loadProjects() {
    console.log('üîÑ Loading projects...');
    
    const savedProjects = localStorage.getItem('portfolioProjects');
    
    if (savedProjects && savedProjects !== 'null' && savedProjects !== 'undefined') {
        try {
            projects = JSON.parse(savedProjects);
            console.log(`üìÅ Loaded ${projects.length} projects from localStorage`, projects);
            
            if (!Array.isArray(projects) || projects.length === 0) {
                throw new Error('Invalid projects data');
            }
        } catch (error) {
            console.error('‚ùå Error loading projects from localStorage:', error);
            projects = getDefaultProjects();
            localStorage.setItem('portfolioProjects', JSON.stringify(projects));
        }
    } else {
        console.log('üìÅ No saved projects found, loading defaults');
        projects = getDefaultProjects();
        localStorage.setItem('portfolioProjects', JSON.stringify(projects));
    }
    
    console.log(`‚úÖ Final projects count: ${projects.length}`);
    renderProjects();
}

function getDefaultProjects() {
    return [
        {
            "id": 1,
            "category": "web",
            "title": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω Moscow RP",
            "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π, —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ GTA 5 RP.",
            "image": "project1.png",
            "demoLink": "https://districkov.github.io/Moscow___RP/",
            "githubLink": "https://github.com/Districkov/Moscow___RP",
            "technologies": ["HTML5", "CSS3", "JavaScript", "Responsive Design"],
            "features": ["–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫", "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω", "–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫"]
        },
        {
            "id": 2,
            "category": "app", 
            "title": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Pyrometer",
            "description": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
            "image": "project2.png",
            "demoLink": "https://pyrometer.tilda.ws/",
            "githubLink": "",
            "technologies": ["React", "Node.js", "WebSocket", "REST API"],
            "features": ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", "–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]
        },
        {
            "id": 3,
            "category": "design",
            "title": "–î–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞ Astra GTA 5 RP", 
            "description": "–°–æ–∑–¥–∞–Ω–∏–µ UI/UX –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ GTA 5 RP —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.",
            "image": "project3.png",
            "demoLink": "https://www.figma.com/design/XbDdfTxHWDtniMplxhkvcu/Astra-Project-%7C-Figma?node-id=310-3098&p=f&t=t1uig8AF5IQqlOv7-0",
            "githubLink": "",
            "technologies": ["Figma", "UI/UX Design", "Prototyping", "Design Systems"],
            "features": ["–î–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞", "–ü—Ä–æ—Ç–æ—Ç–∏–ø—ã", "User Flow", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω"]
        }
    ];
}

function renderProjects() {
    const portfolioGrid = document.getElementById('portfolioGrid');
    if (!portfolioGrid) {
        console.error('‚ùå Portfolio grid element not found!');
        return;
    }

    console.log('üé® Rendering projects:', projects);

    if (!projects || projects.length === 0) {
        portfolioGrid.innerHTML = `
            <div class="empty-portfolio">
                <i class="fas fa-folder-open"></i>
                <h3>–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
                <p>–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.</p>
                <button class="btn" onclick="restoreDefaultProjects()">
                    <i class="fas fa-history"></i> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã
                </button>
            </div>
        `;
        return;
    }

    portfolioGrid.innerHTML = projects.map(project => `
        <div class="portfolio-item ${project.category}" data-category="${project.category}">
            <div class="portfolio-card">
                <div class="portfolio-img">
                    <img src="images/${project.image}" alt="${project.title}" onerror="this.src='images/default-project.png'">
                    <div class="portfolio-overlay">
                        <div class="portfolio-links">
                            ${project.demoLink ? `<a href="${project.demoLink}" target="_blank" class="portfolio-link"><i class="fas fa-external-link-alt"></i></a>` : ''}
                            ${project.githubLink ? `<a href="${project.githubLink}" target="_blank" class="portfolio-link"><i class="fab fa-github"></i></a>` : ''}
                            <a href="#" class="portfolio-link view-details" data-project="${project.id}"><i class="fas fa-eye"></i></a>
                        </div>
                    </div>
                </div>
                <div class="portfolio-content">
                    <span class="portfolio-category">${getCategoryName(project.category)}</span>
                    <h3>${project.title}</h3>
                    <p>${project.description}</p>
                    <div class="portfolio-tech">
                        ${project.technologies.slice(0, 3).map(tech => `<span class="tech-tag">${tech}</span>`).join('')}
                    </div>
                </div>
            </div>
        </div>
    `).join('');

    initProjectFilter();
    initProjectDetails();
    console.log('‚úÖ Projects rendered successfully');
}

function getCategoryName(category) {
    const names = {
        web: '–í–µ–±-—Å–∞–π—Ç',
        app: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 
        design: '–î–∏–∑–∞–π–Ω'
    };
    return names[category] || category;
}

function initProjectFilter() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const portfolioItems = document.querySelectorAll('.portfolio-item');

    filterBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            filterBtns.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            const filterValue = btn.getAttribute('data-filter');
            
            portfolioItems.forEach(item => {
                if (filterValue === 'all' || item.getAttribute('data-category') === filterValue) {
                    item.style.display = 'block';
                    setTimeout(() => {
                        item.style.opacity = '1';
                        item.style.transform = 'translateY(0)';
                    }, 100);
                } else {
                    item.style.opacity = '0';
                    item.style.transform = 'translateY(20px)';
                    setTimeout(() => {
                        item.style.display = 'none';
                    }, 300);
                }
            });
        });
    });
}

function initProjectDetails() {
    document.addEventListener('click', function(e) {
        if (e.target.closest('.view-details')) {
            e.preventDefault();
            const projectId = parseInt(e.target.closest('.view-details').getAttribute('data-project'));
            showProjectDetails(projectId);
        }
    });
}

function showProjectDetails(projectId) {
    const project = projects.find(p => p.id === projectId);
    if (!project) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content">
            <span class="modal-close">&times;</span>
            <div class="modal-header">
                <span class="project-category">${getCategoryName(project.category)}</span>
                <h2>${project.title}</h2>
            </div>
            <div class="modal-body">
                <div class="project-image">
                    <img src="images/${project.image}" alt="${project.title}" onerror="this.src='images/default-project.png'">
                </div>
                <div class="project-info">
                    <div class="project-description">
                        <h3>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</h3>
                        <p>${project.description}</p>
                    </div>
                    <div class="project-technologies">
                        <h3>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h3>
                        <div class="tech-tags">
                            ${project.technologies.map(tech => `<span class="tech-tag">${tech}</span>`).join('')}
                        </div>
                    </div>
                    <div class="project-features">
                        <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h3>
                        <ul>
                            ${project.features.map(feature => `<li>${feature}</li>`).join('')}
                        </ul>
                    </div>
                    <div class="project-links">
                        ${project.demoLink ? `<a href="${project.demoLink}" target="_blank" class="btn"><i class="fas fa-external-link-alt"></i> –î–µ–º–æ</a>` : ''}
                        ${project.githubLink ? `<a href="${project.githubLink}" target="_blank" class="btn btn-outline"><i class="fab fa-github"></i> GitHub</a>` : ''}
                    </div>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    modal.querySelector('.modal-close').addEventListener('click', () => {
        modal.remove();
    });

    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
    document.addEventListener('keydown', function closeModal(e) {
        if (e.key === 'Escape') {
            modal.remove();
            document.removeEventListener('keydown', closeModal);
        }
    });
}

// =============================================
// –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–û–í
// =============================================
function restoreDefaultProjects() {
    if (confirm('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã? –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã.')) {
        projects = getDefaultProjects();
        localStorage.setItem('portfolioProjects', JSON.stringify(projects));
        renderProjects();
        showNotification('–ü—Ä–æ–µ–∫—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!', 'success');
        console.log('‚úÖ Default projects restored');
    }
}

// =============================================
// –¢–ï–ú–ê –ò –ù–ê–°–¢–†–û–ô–ö–ò
// =============================================
function initTheme() {
    const savedTheme = localStorage.getItem('portfolioTheme') || 'dark';
    setTheme(savedTheme);
    
    const themeToggle = document.getElementById('themeToggle');
    if (themeToggle) {
        themeToggle.addEventListener('click', toggleTheme);
        updateThemeIcon(savedTheme);
    }
}

function toggleTheme() {
    const newTheme = document.documentElement.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
    setTheme(newTheme);
}

function setTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('portfolioTheme', theme);
    updateThemeIcon(theme);
    console.log(`üé® Theme changed to: ${theme}`);
}

function updateThemeIcon(theme) {
    const icon = document.querySelector('#themeToggle i');
    if (icon) {
        icon.className = theme === 'dark' ? 'fas fa-moon' : 'fas fa-sun';
    }
}

// =============================================
// –ú–£–ó–´–ö–ê –ò –ê–£–î–ò–û
// =============================================
function initMusic() {
    const music = document.getElementById('backgroundMusic');
    const musicToggle = document.getElementById('musicToggle');
    
    if (!music) {
        console.warn('Background music element not found');
        CONFIG.musicEnabled = false;
        return;
    }

    const musicSettings = JSON.parse(localStorage.getItem('portfolioMusicSettings') || '{"enabled":true,"volume":0.3}');
    CONFIG.musicEnabled = musicSettings.enabled;
    
    music.volume = musicSettings.volume;

    function updateMusicIcon() {
        const icon = musicToggle?.querySelector('i');
        
        if (CONFIG.musicEnabled) {
            icon?.classList.replace('fa-volume-mute', 'fa-volume-up');
        } else {
            icon?.classList.replace('fa-volume-up', 'fa-volume-mute');
        }
    }

    function toggleMusic() {
        CONFIG.musicEnabled = !CONFIG.musicEnabled;
        
        if (CONFIG.musicEnabled) {
            music.play().catch(e => console.log('Autoplay prevented:', e));
        } else {
            music.pause();
        }
        
        const musicSettings = {
            enabled: CONFIG.musicEnabled,
            volume: music.volume
        };
        localStorage.setItem('portfolioMusicSettings', JSON.stringify(musicSettings));
        
        updateMusicIcon();
        showNotification(CONFIG.musicEnabled ? '–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞' : '–ú—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞', 'info');
    }

    if (musicToggle) {
        musicToggle.addEventListener('click', toggleMusic);
    }

    if (CONFIG.musicEnabled) {
        document.addEventListener('click', function startMusic() {
            music.play().catch(e => console.log('Autoplay prevented:', e));
            document.removeEventListener('click', startMusic);
        }, { once: true });
    }

    updateMusicIcon();
}

function initBottomMusicButton() {
    if (!document.getElementById('musicToggle')) {
        const musicButton = document.createElement('button');
        musicButton.id = 'musicToggle';
        musicButton.className = 'music-toggle-bottom';
        musicButton.innerHTML = '<i class="fas fa-volume-up"></i>';
        musicButton.title = '–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É';
        
        musicButton.style.cssText = `
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: var(--primary);
            border: none;
            color: var(--dark);
            font-size: 20px;
            cursor: pointer;
            z-index: 100;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(124, 252, 0, 0.3);
        `;

        musicButton.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.1)';
            this.style.boxShadow = '0 6px 20px rgba(124, 252, 0, 0.5)';
        });

        musicButton.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1)';
            this.style.boxShadow = '0 4px 15px rgba(124, 252, 0, 0.3)';
        });

        document.body.appendChild(musicButton);

        musicButton.addEventListener('click', function() {
            const music = document.getElementById('backgroundMusic');
            if (!music) return;

            CONFIG.musicEnabled = !CONFIG.musicEnabled;
            
            if (CONFIG.musicEnabled) {
                music.play().catch(e => console.log('Autoplay prevented:', e));
                this.innerHTML = '<i class="fas fa-volume-up"></i>';
            } else {
                music.pause();
                this.innerHTML = '<i class="fas fa-volume-mute"></i>';
            }
            
            const musicSettings = {
                enabled: CONFIG.musicEnabled,
                volume: music.volume
            };
            localStorage.setItem('portfolioMusicSettings', JSON.stringify(musicSettings));
        });

        console.log('‚úÖ Bottom music button initialized');
    }
}

// =============================================
// –ê–ù–ò–ú–ê–¶–ò–ò –ò –≠–§–§–ï–ö–¢–´
// =============================================
function initAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate-in');
            }
        });
    }, observerOptions);

    document.querySelectorAll('.fade-in, .service-card, .portfolio-item').forEach(el => {
        observer.observe(el);
    });

    initCounters();
    initSkillsAnimation();
}

function initCounters() {
    const counters = document.querySelectorAll('.counter');
    
    const counterObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const counter = entry.target;
                const target = +counter.getAttribute('data-target');
                const duration = 2000;
                const step = target / (duration / 16);
                let current = 0;
                
                const updateCounter = () => {
                    current += step;
                    if (current < target) {
                        counter.textContent = Math.ceil(current);
                        requestAnimationFrame(updateCounter);
                    } else {
                        counter.textContent = target;
                    }
                };
                
                updateCounter();
                counterObserver.unobserve(counter);
            }
        });
    }, { threshold: 0.5 });
    
    counters.forEach(counter => counterObserver.observe(counter));
}

function initSkillsAnimation() {
    const skillBars = document.querySelectorAll('.skill-progress');
    
    const skillsObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const skillBar = entry.target;
                const width = skillBar.getAttribute('data-width');
                skillBar.style.width = width + '%';
                skillsObserver.unobserve(skillBar);
            }
        });
    }, { threshold: 0.5 });
    
    skillBars.forEach(bar => skillsObserver.observe(bar));
}

function initPageProgress() {
    const progressBar = document.querySelector('.progress-bar');
    if (!progressBar) return;

    window.addEventListener('scroll', () => {
        const windowHeight = window.innerHeight;
        const documentHeight = document.documentElement.scrollHeight - windowHeight;
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const progress = (scrollTop / documentHeight) * 100;
        
        progressBar.style.width = progress + '%';
    });
}

// =============================================
// –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –§–û–ù
// =============================================
function initEnhancedDynamicBackground() {
    const bgContainer = document.getElementById('dynamic-bg');
    if (!bgContainer) return;

    bgContainer.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const gradientOverlay = document.createElement('div');
    gradientOverlay.style.cssText = `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
    `;
    bgContainer.appendChild(gradientOverlay);

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∏–∑ –ª–∏–Ω–∏–π
    createGridLines(bgContainer);
    
    // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã
    createEnhancedParticles(bgContainer);
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–µ –∫—Ä—É–≥–∏
    createPulsingCircles(bgContainer);
    
    console.log('üé® Enhanced dynamic background initialized');
}

function createGridLines(container) {
    const gridSize = 50;
    const gridLines = document.createElement('div');
    gridLines.style.cssText = `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: 
            linear-gradient(rgba(124, 252, 0, 0.03) 1px, transparent 1px),
            linear-gradient(90deg, rgba(124, 252, 0, 0.03) 1px, transparent 1px);
        background-size: ${gridSize}px ${gridSize}px;
        z-index: 0;
    `;
    container.appendChild(gridLines);
}

function createEnhancedParticles(container) {
    const particleCount = 80;
    
    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        const size = Math.random() * 4 + 1;
        const duration = Math.random() * 25 + 15;
        const delay = Math.random() * 5;
        
        particle.style.cssText = `
            position: absolute;
            width: ${size}px;
            height: ${size}px;
            background: var(--primary);
            border-radius: 50%;
            left: ${Math.random() * 100}%;
            top: ${Math.random() * 100}%;
            opacity: ${Math.random() * 0.4 + 0.1};
            animation: enhancedFloat ${duration}s linear infinite ${delay}s;
            filter: blur(${Math.random() * 2}px);
        `;
        
        container.appendChild(particle);
    }
}

function createPulsingCircles(container) {
    const circleCount = 3;
    
    for (let i = 0; i < circleCount; i++) {
        const circle = document.createElement('div');
        const size = Math.random() * 200 + 100;
        const duration = Math.random() * 8 + 4;
        const delay = Math.random() * 2;
        
        circle.style.cssText = `
            position: absolute;
            width: ${size}px;
            height: ${size}px;
            border: 1px solid rgba(124, 252, 0, 0.1);
            border-radius: 50%;
            left: ${Math.random() * 100}%;
            top: ${Math.random() * 100}%;
            opacity: 0;
            animation: pulseCircle ${duration}s ease-in-out infinite ${delay}s;
            z-index: 0;
        `;
        
        container.appendChild(circle);
    }
}

// =============================================
// AI –ß–ê–¢-–ê–°–°–ò–°–¢–ï–ù–¢
// =============================================
function initEnhancedChatAssistant() {
    createChatAssistantElements();
    
    const chatToggle = document.getElementById('chatToggle');
    const chatClose = document.getElementById('chatClose');
    const chatSend = document.getElementById('chatSend');
    const chatInput = document.getElementById('chatInput');
    const chatAssistant = document.getElementById('chat-assistant');
    
    if (!chatToggle) return;
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á–∞—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç
    if (chatAssistant) {
        chatAssistant.style.display = 'none';
        chatAssistant.classList.remove('active');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
    chatToggle.addEventListener('click', () => {
        const isActive = chatAssistant.classList.contains('active');
        
        if (isActive) {
            closeChatAssistant();
        } else {
            chatAssistant.style.display = 'flex';
            setTimeout(() => {
                chatAssistant.classList.add('active');
                chatInput.focus();
            }, 10);
        }
    });
    
    if (chatClose) {
        chatClose.addEventListener('click', () => {
            closeChatAssistant();
        });
    }
    
    function sendMessage() {
        const message = chatInput.value.trim();
        if (!message) return;
        
        addMessage(message, 'user');
        chatInput.value = '';
        
        showTypingIndicator();
        
        setTimeout(() => {
            removeTypingIndicator();
            const response = generateEnhancedAIResponse(message);
            addMessage(response, 'bot');
            scrollChatToBottom();
        }, 1000 + Math.random() * 2000);
    }
    
    if (chatSend) {
        chatSend.addEventListener('click', sendMessage);
    }
    
    if (chatInput) {
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });
    }
    
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && chatAssistant.classList.contains('active')) {
            closeChatAssistant();
        }
    });
    
    addEnhancedQuickReplies();
    
    console.log('ü§ñ Enhanced chat assistant initialized');
}

function createChatAssistantElements() {
    if (document.getElementById('chat-assistant')) return;
    
    const chatHTML = `
        <div class="chat-toggle" id="chatToggle">
            <i class="fas fa-robot"></i>
        </div>
        
        <div class="chat-assistant" id="chat-assistant">
            <div class="chat-header">
                <div class="chat-title">
                    <i class="fas fa-robot"></i>
                    <span>AI –ü–æ–º–æ—â–Ω–∏–∫</span>
                </div>
                <button class="chat-close" id="chatClose">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="chat-messages" id="chatMessages">
                <div class="message bot-message">
                    <div class="message-avatar">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="message-content">
                        <p>–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞–≤—ã–∫–∞—Ö, –ø—Ä–æ–µ–∫—Ç–∞—Ö, –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –∏ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</p>
                    </div>
                </div>
            </div>
            
            <div class="chat-input-container">
                <input type="text" id="chatInput" placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å...">
                <button class="chat-send" id="chatSend">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    `;
    
    const chatContainer = document.createElement('div');
    chatContainer.innerHTML = chatHTML;
    document.body.appendChild(chatContainer);
    
    addChatStyles();
}

function addChatStyles() {
    if (document.querySelector('#chat-styles')) return;
    
    const chatStyles = `
        .chat-toggle {
            position: fixed;
            bottom: 100px;
            right: 30px;
            width: 60px;
            height: 60px;
            background: var(--primary);
            color: var(--dark);
            border: none;
            border-radius: 50%;
            cursor: pointer;
            transition: var(--transition);
            z-index: 100;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            box-shadow: var(--shadow);
        }
        
        .chat-toggle:hover {
            transform: scale(1.1);
            box-shadow: var(--glow);
        }
        
        .chat-assistant {
            position: fixed;
            bottom: 170px;
            right: 30px;
            width: 400px;
            height: 500px;
            background: var(--dark-light);
            border: 1px solid rgba(124, 252, 0, 0.2);
            border-radius: var(--border-radius);
            display: none;
            flex-direction: column;
            z-index: 101;
            box-shadow: var(--shadow);
            transform: translateY(20px) scale(0.9);
            opacity: 0;
            transition: all 0.3s ease;
        }
        
        .chat-assistant.active {
            transform: translateY(0) scale(1);
            opacity: 1;
        }
        
        .chat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid rgba(124, 252, 0, 0.1);
            background: rgba(10, 10, 10, 0.8);
            border-radius: var(--border-radius) var(--border-radius) 0 0;
        }
        
        .chat-title {
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 600;
            color: var(--light);
        }
        
        .chat-title i {
            color: var(--primary);
        }
        
        .chat-close {
            background: none;
            border: none;
            color: var(--gray);
            cursor: pointer;
            padding: 5px;
            border-radius: 3px;
            transition: var(--transition);
        }
        
        .chat-close:hover {
            color: var(--light);
            background: rgba(255,255,255,0.1);
        }
        
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .message {
            display: flex;
            gap: 10px;
            align-items: flex-start;
        }
        
        .user-message {
            flex-direction: row-reverse;
        }
        
        .message-avatar {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background: var(--primary);
            color: var(--dark);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.9rem;
            flex-shrink: 0;
        }
        
        .user-message .message-avatar {
            background: var(--gray);
        }
        
        .message-content {
            max-width: 70%;
            background: rgba(124, 252, 0, 0.1);
            padding: 12px 15px;
            border-radius: 15px;
            border: 1px solid rgba(124, 252, 0, 0.2);
        }
        
        .user-message .message-content {
            background: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.2);
        }
        
        .message-content p {
            margin: 0;
            color: var(--light);
            font-size: 0.9rem;
            line-height: 1.4;
        }
        
        .typing-indicator {
            display: flex;
            gap: 4px;
            align-items: center;
        }
        
        .typing-dot {
            width: 6px;
            height: 6px;
            background: var(--primary);
            border-radius: 50%;
            animation: typingBounce 1.4s infinite ease-in-out;
        }
        
        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }
        
        .quick-replies.enhanced {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            margin-top: 10px;
        }
        
        .quick-reply.enhanced {
            background: rgba(124, 252, 0, 0.1);
            border: 1px solid rgba(124, 252, 0, 0.3);
            color: var(--primary);
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 5px;
            justify-content: center;
            text-align: center;
        }
        
        .quick-reply.enhanced:hover {
            background: rgba(124, 252, 0, 0.2);
            transform: translateY(-2px);
        }
        
        .chat-input-container {
            display: flex;
            padding: 20px;
            border-top: 1px solid rgba(124, 252, 0, 0.1);
            gap: 10px;
        }
        
        #chatInput {
            flex: 1;
            padding: 12px 15px;
            background: var(--dark);
            border: 1px solid rgba(124, 252, 0, 0.2);
            border-radius: 25px;
            color: var(--light);
            font-size: 0.9rem;
        }
        
        #chatInput:focus {
            outline: none;
            border-color: var(--primary);
        }
        
        .chat-send {
            width: 45px;
            height: 45px;
            background: var(--primary);
            color: var(--dark);
            border: none;
            border-radius: 50%;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .chat-send:hover {
            transform: scale(1.1);
            box-shadow: var(--glow);
        }
        
        @keyframes typingBounce {
            0%, 80%, 100% {
                transform: scale(0.8);
                opacity: 0.5;
            }
            40% {
                transform: scale(1);
                opacity: 1;
            }
        }
    `;
    
    const styleSheet = document.createElement('style');
    styleSheet.id = 'chat-styles';
    styleSheet.textContent = chatStyles;
    document.head.appendChild(styleSheet);
}

function closeChatAssistant() {
    const chatAssistant = document.getElementById('chat-assistant');
    if (chatAssistant) {
        chatAssistant.classList.remove('active');
        setTimeout(() => {
            chatAssistant.style.display = 'none';
        }, 300);
    }
}

function addMessage(text, sender) {
    const chatMessages = document.getElementById('chatMessages');
    if (!chatMessages) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    const avatar = sender === 'user' ? '<i class="fas fa-user"></i>' : '<i class="fas fa-robot"></i>';
    
    messageDiv.innerHTML = `
        <div class="message-avatar">
            ${avatar}
        </div>
        <div class="message-content">
            <p>${text}</p>
        </div>
    `;
    
    chatMessages.appendChild(messageDiv);
    scrollChatToBottom();
}

function showTypingIndicator() {
    const chatMessages = document.getElementById('chatMessages');
    if (!chatMessages) return;
    
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message bot-message';
    typingDiv.id = 'typing-indicator';
    
    typingDiv.innerHTML = `
        <div class="message-avatar">
            <i class="fas fa-robot"></i>
        </div>
        <div class="message-content">
            <div class="typing-indicator">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        </div>
    `;
    
    chatMessages.appendChild(typingDiv);
    scrollChatToBottom();
}

function removeTypingIndicator() {
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

function scrollChatToBottom() {
    const chatMessages = document.getElementById('chatMessages');
    if (chatMessages) {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
}

function addEnhancedQuickReplies() {
    const chatMessages = document.getElementById('chatMessages');
    if (!chatMessages) return;
    
    const quickReplies = [
        { text: "–†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–∞–≤—ã–∫–∞—Ö", icon: "fas fa-code" },
        { text: "–ü–æ–∫–∞–∂–∏ –ø—Ä–æ–µ–∫—Ç—ã", icon: "fas fa-briefcase" },
        { text: "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", icon: "fas fa-history" },
        { text: "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è?", icon: "fas fa-phone" },
        { text: "–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏?", icon: "fas fa-cogs" },
        { text: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π", icon: "fas fa-music" }
    ];
    
    const quickRepliesDiv = document.createElement('div');
    quickRepliesDiv.className = 'quick-replies enhanced';
    
    quickReplies.forEach(reply => {
        const button = document.createElement('button');
        button.className = 'quick-reply enhanced';
        button.innerHTML = `<i class="${reply.icon}"></i> ${reply.text}`;
        button.addEventListener('click', () => {
            handleQuickReply(reply.text);
        });
        
        quickRepliesDiv.appendChild(button);
    });
    
    const existingReplies = chatMessages.querySelector('.quick-replies.enhanced');
    if (!existingReplies) {
        chatMessages.appendChild(quickRepliesDiv);
    }
}

function handleQuickReply(replyText) {
    addMessage(replyText, 'user');
    showTypingIndicator();
    
    setTimeout(() => {
        removeTypingIndicator();
        const response = generateEnhancedAIResponse(replyText);
        addMessage(response, 'bot');
        scrollChatToBottom();
    }, 800);
}

function generateEnhancedAIResponse(userMessage) {
    const message = userMessage.toLowerCase();
    
    const responses = {
        skills: `–ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –≤–∫–ª—é—á–∞—é—Ç:
‚Ä¢ HTML/CSS (95%) - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å—Ç–∫–∞, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
‚Ä¢ JavaScript (90%) - ES6+, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ React (85%) - –•—É–∫–∏, Context API, React Router
‚Ä¢ Svelte (70%) - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫
‚Ä¢ UI/UX Design (75%) - –ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã

–¢–∞–∫–∂–µ –∏–º–µ—é –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ API.`,

        projects: `–í –º–æ–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:

üè™ **Moscow RP** - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –¥–ª—è GTA 5 RP
‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: HTML, CSS, JavaScript
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –ö–æ—Ä–∑–∏–Ω–∞, —Ñ–∏–ª—å—Ç—Ä—ã, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω

üì± **Pyrometer** - –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: React, Node.js
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üé® **Astra GTA 5 RP** - UI/UX –¥–∏–∑–∞–π–Ω
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: Figma, Adobe XD
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ flow`,

        experience: `–ú–æ–π –æ–ø—ã—Ç –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:

‚è≥ **2+ –≥–æ–¥–∞** –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
‚úÖ **10+ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤**
üë• **6+ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤**
üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è**: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

–†–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - –æ—Ç –ª–µ–Ω–¥–∏–Ω–≥–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.`,

        contact: `üìß **Email**: districkov@yandex.ru
‚úàÔ∏è **Telegram**: @districkov
üíª **GitHub**: Districkov

üìç **–õ–æ–∫–∞—Ü–∏—è**: –ú–æ—Å–∫–≤–∞
üïí **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å**: –í —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤

–ë—É–¥—É —Ä–∞–¥ –æ–±—Å—É–¥–∏—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç!`,

        services: `üéØ **–ú–æ–∏ —É—Å–ª—É–≥–∏**:

üíª **–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞**
–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

üì± **–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω**
–ò–¥–µ–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö

üé® **UI/UX –î–∏–∑–∞–π–Ω**
–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

‚ö° **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**
–£—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`,

        music: `üéµ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π**:

–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–æ–π —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É:

üîä **–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ** - –∫–Ω–æ–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π –¥–∏–Ω–∞–º–∏–∫–∞
üéµ **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª**: –ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä, —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏

–ú—É–∑—ã–∫–∞ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∏—è—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ!`
    };
    
    if (message.includes('–Ω–∞–≤—ã–∫') || message.includes('skill') || message.includes('—É–º–µ–Ω–∏–µ') || message.includes('—Ç–µ—Ö–Ω–æ–ª–æ–≥') || message.includes('stack')) {
        return responses.skills;
    } else if (message.includes('–ø—Ä–æ–µ–∫—Ç') || message.includes('—Ä–∞–±–æ—Ç') || message.includes('portfolio') || message.includes('–∫–µ–π—Å') || message.includes('moscow') || message.includes('pyrometer')) {
        return responses.projects;
    } else if (message.includes('–æ–ø—ã—Ç') || message.includes('experience') || message.includes('—Å—Ç–∞–∂') || message.includes('–ª–µ—Ç') || message.includes('–≥–æ–¥')) {
        return responses.experience;
    } else if (message.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || message.includes('—Å–≤—è–∑–∞—Ç—å') || message.includes('contact') || message.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') || message.includes('email') || message.includes('telegram')) {
        return responses.contact;
    } else if (message.includes('—É—Å–ª—É–≥') || message.includes('service') || message.includes('–ø—Ä–µ–¥–ª–æ–∂–µ–Ω') || message.includes('–¥–µ–ª–∞–µ—à—å') || message.includes('–ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å')) {
        return responses.services;
    } else if (message.includes('–º—É–∑—ã–∫') || message.includes('sound') || message.includes('audio') || message.includes('–∑–≤—É–∫') || message.includes('–ø–ª–µ–µ—Ä')) {
        return responses.music;
    } else if (message.includes('–ø—Ä–∏–≤–µ—Ç') || message.includes('hello') || message.includes('hi') || message.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤') || message.includes('–Ω–∞—á–∞—Ç—å')) {
        return `–ü—Ä–∏–≤–µ—Ç! üëã 

–Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ Districk. –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!

–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ:
‚Ä¢ –ù–∞–≤—ã–∫–∞—Ö –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö üõ†
‚Ä¢ –ü—Ä–æ–µ–∫—Ç–∞—Ö –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ üíº
‚Ä¢ –û–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã üìà
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–∞—Ö –¥–ª—è —Å–≤—è–∑–∏ üìû
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö —É—Å–ª—É–≥–∞—Ö üéØ

–¢–∞–∫–∂–µ –º–æ–≥—É –ø–æ–º–æ—á—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –º—É–∑—ã–∫–æ–π üéµ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Å–∞–π—Ç—É.

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`;
    } else if (message.includes('—Å–ø–∞—Å–∏–±–æ') || message.includes('thanks') || message.includes('thank you') || message.includes('–±–ª–∞–≥–æ–¥–∞—Ä')) {
        return `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä 
–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ" üöÄ`;
    } else if (message.includes('–ø–æ–∫–∞') || message.includes('bye') || message.includes('–¥–æ —Å–≤–∏–¥–∞–Ω') || message.includes('–≤—ã—Ö–æ–¥')) {
        return `–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã 
–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤ –±—É–¥—É—â–µ–º. –£–¥–∞—á–∏!`;
    } else {
        return `ü§î –ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å.

–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ:
‚Ä¢ –ú–æ–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
‚Ä¢ –ü—Ä–æ–µ–∫—Ç–∞—Ö –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ  
‚Ä¢ –û–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö —É—Å–ª—É–≥–∞—Ö
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º—É–∑—ã–∫–æ–π –Ω–∞ —Å–∞–π—Ç–µ

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∏–∂–µ!`;
    }
}

// =============================================
// –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
// =============================================
function initEventListeners() {
    initNavigation();
    initContactForm();
    initNetworkMonitoring();
    
    window.addEventListener('load', () => {
        setTimeout(() => {
            const preloader = document.getElementById('preloader');
            if (preloader) {
                preloader.style.opacity = '0';
                setTimeout(() => {
                    preloader.style.display = 'none';
                }, 500);
            }
        }, 1000);
    });
}

function initNetworkMonitoring() {
    const networkStatus = document.createElement('div');
    networkStatus.className = 'network-status';
    networkStatus.id = 'networkStatus';
    document.body.appendChild(networkStatus);

    function updateNetworkStatus() {
        if (navigator.onLine) {
            networkStatus.textContent = '–û–Ω–ª–∞–π–Ω';
            networkStatus.className = 'network-status online';
            setTimeout(() => {
                networkStatus.style.display = 'none';
            }, 3000);
        } else {
            networkStatus.textContent = '–û—Ñ–ª–∞–π–Ω';
            networkStatus.className = 'network-status offline';
            networkStatus.style.display = 'block';
        }
    }

    window.addEventListener('online', updateNetworkStatus);
    window.addEventListener('offline', updateNetworkStatus);
    
    updateNetworkStatus();
}

function initContactForm() {
    const contactForm = document.getElementById('contactForm');
    if (!contactForm) return;

    contactForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = {
            name: document.getElementById('name').value,
            email: document.getElementById('email').value,
            message: document.getElementById('message').value
        };

        console.log('Contact form submitted:', formData);
        
        showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
        
        this.reset();
    });
}

// =============================================
// –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
// =============================================
function showNotification(message, type = 'info') {
    removeExistingNotifications();
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <i class="fas fa-${getNotificationIcon(type)}"></i>
            <div class="notification-message">${message}</div>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => notification.classList.add('show'), 100);
    
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 300);
    }, 5000);
}

function getNotificationIcon(type) {
    const icons = {
        success: 'check-circle',
        error: 'exclamation-circle',
        warning: 'exclamation-triangle',
        info: 'info-circle'
    };
    return icons[type] || 'info-circle';
}

function removeExistingNotifications() {
    const existing = document.querySelectorAll('.notification');
    existing.forEach(notification => {
        if (notification.classList.contains('show')) {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        } else {
            notification.remove();
        }
    });
}

// =============================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =============================================
window.toggleCustomCursor = function(enabled) {
    if (window.customCursor) {
        window.customCursor.toggle(enabled);
    }
};

window.switchLanguage = switchLanguage;
window.restoreDefaultProjects = restoreDefaultProjects;

// –û—Ç–ª–∞–¥–∫–∞
window.debugProjects = function() {
    console.log('=== PROJECTS DEBUG INFO ===');
    console.log('Projects array:', projects);
    console.log('LocalStorage data:', localStorage.getItem('portfolioProjects'));
    console.log('Portfolio grid element:', document.getElementById('portfolioGrid'));
    console.log('==========================');
};

console.log('üé® Enhanced features loaded successfully!');