// =============================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// =============================================
const CONFIG = {
    enable3D: false,
    musicEnabled: true,
    particlesEnabled: true,
    autoOpenChat: true
};

let projects = [];
let threeScene = null;
let currentAudio = null;

// =============================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// =============================================
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Initializing portfolio application...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    initializeApp();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    loadProjects();
    
    console.log('‚úÖ Portfolio application initialized successfully!');
});

function initializeApp() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
    initTheme();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∏
    initMusic();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initEventListeners();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
    initAnimations();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ–Ω–∞
    initEnhancedDynamicBackground();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    initPageProgress();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –º—É–∑—ã–∫–∏ –≤–Ω–∏–∑—É
    initBottomMusicButton();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    initEnhancedChatAssistant();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
    if (CONFIG.autoOpenChat) {
        setTimeout(() => {
            const chatToggle = document.getElementById('chatToggle');
            if (chatToggle && !document.getElementById('chat-assistant').classList.contains('active')) {
                chatToggle.click();
                showNotification('ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –º–æ–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö –∏ –ø—Ä–æ–µ–∫—Ç–∞—Ö.', 'info');
            }
        }, 20000);
    }
}

// =============================================
// –£–õ–£–ß–®–ï–ù–ù–´–ô –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –§–û–ù
// =============================================
function initEnhancedDynamicBackground() {
    const bgContainer = document.getElementById('dynamic-bg');
    if (!bgContainer) return;

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    bgContainer.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const gradientOverlay = document.createElement('div');
    gradientOverlay.style.cssText = `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: 
            radial-gradient(circle at 20% 20%, rgba(124, 252, 0, 0.15) 0%, transparent 40%),
            radial-gradient(circle at 80% 80%, rgba(124, 252, 0, 0.1) 0%, transparent 40%),
            radial-gradient(circle at 40% 60%, rgba(124, 252, 0, 0.08) 0%, transparent 30%);
        z-index: 1;
    `;
    bgContainer.appendChild(gradientOverlay);

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∏–∑ –ª–∏–Ω–∏–π
    createGridLines(bgContainer);
    
    // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã
    createEnhancedParticles(bgContainer);
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–µ –∫—Ä—É–≥–∏
    createPulsingCircles(bgContainer);
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    createConnectionLines(bgContainer);
    
    console.log('üé® Enhanced dynamic background initialized');
}

function createGridLines(container) {
    const gridSize = 60;
    const gridLines = document.createElement('div');
    gridLines.style.cssText = `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: 
            linear-gradient(rgba(124, 252, 0, 0.04) 1px, transparent 1px),
            linear-gradient(90deg, rgba(124, 252, 0, 0.04) 1px, transparent 1px);
        background-size: ${gridSize}px ${gridSize}px;
        z-index: 0;
        animation: gridMove 20s linear infinite;
    `;
    container.appendChild(gridLines);
}

function createEnhancedParticles(container) {
    const particleCount = 100;
    
    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        const size = Math.random() * 5 + 1;
        const duration = Math.random() * 30 + 20;
        const delay = Math.random() * 10;
        const colorVariation = Math.random() * 40 - 20;
        
        particle.style.cssText = `
            position: absolute;
            width: ${size}px;
            height: ${size}px;
            background: hsl(${120 + colorVariation}, 100%, 65%);
            border-radius: ${Math.random() > 0.5 ? '50%' : '30%'};
            left: ${Math.random() * 100}%;
            top: ${Math.random() * 100}%;
            opacity: ${Math.random() * 0.3 + 0.1};
            animation: enhancedFloat ${duration}s linear infinite ${delay}s;
            filter: blur(${Math.random() * 3}px);
            box-shadow: 0 0 ${size * 2}px currentColor;
        `;
        
        container.appendChild(particle);
    }
}

function createPulsingCircles(container) {
    const circleCount = 5;
    
    for (let i = 0; i < circleCount; i++) {
        const circle = document.createElement('div');
        const size = Math.random() * 300 + 150;
        const duration = Math.random() * 10 + 6;
        const delay = Math.random() * 5;
        
        circle.style.cssText = `
            position: absolute;
            width: ${size}px;
            height: ${size}px;
            border: 2px solid rgba(124, 252, 0, 0.15);
            border-radius: 50%;
            left: ${Math.random() * 100}%;
            top: ${Math.random() * 100}%;
            opacity: 0;
            animation: pulseCircle ${duration}s ease-in-out infinite ${delay}s;
            z-index: 0;
            box-shadow: 0 0 50px rgba(124, 252, 0, 0.1);
        `;
        
        container.appendChild(circle);
    }
}

function createConnectionLines(container) {
    const lineCount = 8;
    
    for (let i = 0; i < lineCount; i++) {
        const line = document.createElement('div');
        const length = Math.random() * 200 + 100;
        const angle = Math.random() * 360;
        const duration = Math.random() * 15 + 10;
        const delay = Math.random() * 5;
        
        line.style.cssText = `
            position: absolute;
            width: ${length}px;
            height: 1px;
            background: linear-gradient(90deg, transparent, rgba(124, 252, 0, 0.3), transparent);
            left: ${Math.random() * 100}%;
            top: ${Math.random() * 100}%;
            transform: rotate(${angle}deg);
            opacity: ${Math.random() * 0.4 + 0.1};
            animation: linePulse ${duration}s ease-in-out infinite ${delay}s;
            z-index: 0;
        `;
        
        container.appendChild(line);
    }
}

// =============================================
// –£–õ–£–ß–®–ï–ù–ù–´–ô AI CHAT ASSISTANT
// =============================================
function initEnhancedChatAssistant() {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    createChatAssistantElements();
    
    const chatToggle = document.getElementById('chatToggle');
    const chatClose = document.getElementById('chatClose');
    const chatSend = document.getElementById('chatSend');
    const chatInput = document.getElementById('chatInput');
    const chatAssistant = document.getElementById('chat-assistant');
    
    if (!chatToggle) {
        console.log('Chat assistant elements not found');
        return;
    }
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á–∞—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç
    if (chatAssistant) {
        chatAssistant.style.display = 'none';
        chatAssistant.classList.remove('active');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
    chatToggle.addEventListener('click', () => {
        const isActive = chatAssistant.classList.contains('active');
        
        if (isActive) {
            closeChatAssistant();
        } else {
            chatAssistant.style.display = 'flex';
            setTimeout(() => {
                chatAssistant.classList.add('active');
                chatInput.focus();
                // –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
                addEnhancedQuickReplies();
            }, 10);
        }
    });
    
    if (chatClose) {
        chatClose.addEventListener('click', () => {
            closeChatAssistant();
        });
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    function sendMessage() {
        const message = chatInput.value.trim();
        if (!message) return;
        
        addMessage(message, 'user');
        chatInput.value = '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        showTypingIndicator();
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–≤–µ—Ç–∞ AI
        setTimeout(() => {
            removeTypingIndicator();
            const response = generateEnhancedAIResponse(message);
            addMessage(response, 'bot');
            scrollChatToBottom();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
            setTimeout(() => {
                addEnhancedQuickReplies();
            }, 500);
        }, 1000 + Math.random() * 1500);
    }
    
    if (chatSend) {
        chatSend.addEventListener('click', sendMessage);
    }
    
    if (chatInput) {
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });
        
        // –ê–≤—Ç–æ-—Ä–æ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        chatInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && chatAssistant.classList.contains('active')) {
            closeChatAssistant();
        }
    });
    
    console.log('ü§ñ Enhanced chat assistant initialized');
}

function createChatAssistantElements() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Ç
    if (document.getElementById('chat-assistant')) return;
    
    const chatHTML = `
        <div class="chat-toggle" id="chatToggle">
            <i class="fas fa-robot"></i>
            <div class="chat-pulse"></div>
        </div>
        
        <div class="chat-assistant" id="chat-assistant">
            <div class="chat-header">
                <div class="chat-title">
                    <i class="fas fa-robot"></i>
                    <span>AI –ü–æ–º–æ—â–Ω–∏–∫ Districk</span>
                    <div class="chat-status">
                        <div class="status-dot"></div>
                        <span>Online</span>
                    </div>
                </div>
                <button class="chat-close" id="chatClose">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="chat-messages" id="chatMessages">
                <div class="message bot-message">
                    <div class="message-avatar">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="message-content">
                        <p>–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞–≤—ã–∫–∞—Ö, –ø—Ä–æ–µ–∫—Ç–∞—Ö, –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –∏ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</p>
                        <div class="message-time">${getCurrentTime()}</div>
                    </div>
                </div>
            </div>
            
            <div class="chat-input-container">
                <div class="chat-input-wrapper">
                    <input type="text" id="chatInput" placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..." maxlength="500">
                    <div class="char-counter">0/500</div>
                </div>
                <button class="chat-send" id="chatSend">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    `;
    
    const chatContainer = document.createElement('div');
    chatContainer.innerHTML = chatHTML;
    document.body.appendChild(chatContainer);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —á–∞—Ç–∞
    addChatStyles();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
    initCharCounter();
}

function initCharCounter() {
    const chatInput = document.getElementById('chatInput');
    const charCounter = document.querySelector('.char-counter');
    
    if (chatInput && charCounter) {
        chatInput.addEventListener('input', function() {
            charCounter.textContent = `${this.value.length}/500`;
            
            if (this.value.length > 450) {
                charCounter.style.color = '#ff4757';
            } else if (this.value.length > 400) {
                charCounter.style.color = '#ffa502';
            } else {
                charCounter.style.color = 'var(--gray)';
            }
        });
    }
}

function getCurrentTime() {
    const now = new Date();
    return now.getHours().toString().padStart(2, '0') + ':' + 
           now.getMinutes().toString().padStart(2, '0');
}

function addChatStyles() {
    const chatStyles = `
        .chat-toggle {
            position: fixed;
            bottom: 100px;
            right: 30px;
            width: 70px;
            height: 70px;
            background: linear-gradient(135deg, var(--primary), #6be000);
            color: var(--dark);
            border: none;
            border-radius: 50%;
            cursor: pointer;
            transition: var(--transition);
            z-index: 100;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.8rem;
            box-shadow: 0 8px 25px rgba(124, 252, 0, 0.4);
            animation: chatBounce 3s ease-in-out infinite;
        }
        
        .chat-toggle:hover {
            transform: scale(1.15) rotate(5deg);
            box-shadow: 0 12px 35px rgba(124, 252, 0, 0.6);
        }
        
        .chat-pulse {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: var(--primary);
            animation: chatPulse 2s ease-out infinite;
            z-index: -1;
        }
        
        .chat-assistant {
            position: fixed;
            bottom: 180px;
            right: 30px;
            width: 420px;
            height: 550px;
            background: var(--dark-light);
            border: 2px solid rgba(124, 252, 0, 0.3);
            border-radius: 20px;
            display: none;
            flex-direction: column;
            z-index: 101;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
            transform: translateY(20px) scale(0.95);
            opacity: 0;
            transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
            backdrop-filter: blur(10px);
        }
        
        .chat-assistant.active {
            transform: translateY(0) scale(1);
            opacity: 1;
        }
        
        .chat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 25px;
            border-bottom: 1px solid rgba(124, 252, 0, 0.2);
            background: linear-gradient(135deg, rgba(10, 10, 10, 0.9), rgba(26, 26, 26, 0.9));
            border-radius: 20px 20px 0 0;
        }
        
        .chat-title {
            display: flex;
            align-items: center;
            gap: 12px;
            font-weight: 600;
            color: var(--light);
        }
        
        .chat-title i {
            color: var(--primary);
            font-size: 1.2rem;
        }
        
        .chat-status {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 0.8rem;
            color: var(--gray);
        }
        
        .status-dot {
            width: 8px;
            height: 8px;
            background: #00d26a;
            border-radius: 50%;
            animation: statusPulse 2s infinite;
        }
        
        .chat-close {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: var(--gray);
            cursor: pointer;
            padding: 8px;
            border-radius: 10px;
            transition: var(--transition);
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .chat-close:hover {
            color: var(--light);
            background: rgba(255, 255, 255, 0.2);
            transform: rotate(90deg);
        }
        
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 20px;
            background: rgba(10, 10, 10, 0.5);
        }
        
        .message {
            display: flex;
            gap: 12px;
            align-items: flex-start;
            animation: messageSlide 0.3s ease-out;
        }
        
        .user-message {
            flex-direction: row-reverse;
        }
        
        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--primary), #6be000);
            color: var(--dark);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
            flex-shrink: 0;
            box-shadow: 0 4px 12px rgba(124, 252, 0, 0.3);
        }
        
        .user-message .message-avatar {
            background: linear-gradient(135deg, #667eea, #764ba2);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }
        
        .message-content {
            max-width: 75%;
            background: rgba(124, 252, 0, 0.1);
            padding: 15px 18px;
            border-radius: 18px;
            border: 1px solid rgba(124, 252, 0, 0.2);
            position: relative;
            backdrop-filter: blur(5px);
        }
        
        .user-message .message-content {
            background: rgba(102, 126, 234, 0.15);
            border-color: rgba(102, 126, 234, 0.3);
        }
        
        .message-content p {
            margin: 0;
            color: var(--light);
            font-size: 0.95rem;
            line-height: 1.5;
        }
        
        .message-time {
            font-size: 0.75rem;
            color: var(--gray);
            margin-top: 8px;
            text-align: right;
        }
        
        .typing-indicator {
            display: flex;
            gap: 5px;
            align-items: center;
            padding: 5px 0;
        }
        
        .typing-dot {
            width: 8px;
            height: 8px;
            background: var(--primary);
            border-radius: 50%;
            animation: typingBounce 1.4s infinite ease-in-out;
        }
        
        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }
        
        .quick-replies.enhanced {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 15px;
            animation: quickRepliesSlide 0.4s ease-out;
        }
        
        .quick-reply.enhanced {
            background: rgba(124, 252, 0, 0.1);
            border: 1px solid rgba(124, 252, 0, 0.4);
            color: var(--primary);
            padding: 10px 15px;
            border-radius: 25px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            justify-content: center;
            text-align: center;
            backdrop-filter: blur(5px);
        }
        
        .quick-reply.enhanced:hover {
            background: rgba(124, 252, 0, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(124, 252, 0, 0.3);
        }
        
        .quick-reply.enhanced:active {
            transform: translateY(0);
        }
        
        .chat-input-container {
            display: flex;
            padding: 20px;
            border-top: 1px solid rgba(124, 252, 0, 0.1);
            gap: 12px;
            align-items: flex-end;
            background: rgba(10, 10, 10, 0.8);
            border-radius: 0 0 20px 20px;
        }
        
        .chat-input-wrapper {
            flex: 1;
            position: relative;
        }
        
        #chatInput {
            width: 100%;
            padding: 15px 20px;
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid rgba(124, 252, 0, 0.2);
            border-radius: 25px;
            color: var(--light);
            font-size: 0.95rem;
            resize: none;
            transition: var(--transition);
            min-height: 50px;
            max-height: 120px;
        }
        
        #chatInput:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(124, 252, 0, 0.1);
        }
        
        .char-counter {
            position: absolute;
            bottom: 8px;
            right: 15px;
            font-size: 0.75rem;
            color: var(--gray);
            background: rgba(10, 10, 10, 0.8);
            padding: 2px 6px;
            border-radius: 10px;
        }
        
        .chat-send {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, var(--primary), #6be000);
            color: var(--dark);
            border: none;
            border-radius: 50%;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.1rem;
            box-shadow: 0 4px 15px rgba(124, 252, 0, 0.4);
        }
        
        .chat-send:hover {
            transform: scale(1.1) rotate(10deg);
            box-shadow: 0 6px 20px rgba(124, 252, 0, 0.6);
        }
        
        .chat-send:active {
            transform: scale(0.95);
        }
        
        @keyframes chatBounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        
        @keyframes chatPulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            100% {
                transform: scale(1.5);
                opacity: 0;
            }
        }
        
        @keyframes statusPulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        @keyframes typingBounce {
            0%, 80%, 100% {
                transform: scale(0.8);
                opacity: 0.5;
            }
            40% {
                transform: scale(1);
                opacity: 1;
            }
        }
        
        @keyframes messageSlide {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes quickRepliesSlide {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes enhancedFloat {
            0%, 100% {
                transform: translateY(0) translateX(0) rotate(0deg);
            }
            25% {
                transform: translateY(-40px) translateX(20px) rotate(90deg);
            }
            50% {
                transform: translateY(-20px) translateX(40px) rotate(180deg);
            }
            75% {
                transform: translateY(-30px) translateX(-20px) rotate(270deg);
            }
        }
        
        @keyframes pulseCircle {
            0% {
                transform: scale(0.8);
                opacity: 0;
            }
            50% {
                opacity: 0.4;
            }
            100% {
                transform: scale(2.5);
                opacity: 0;
            }
        }
        
        @keyframes gridMove {
            0% {
                background-position: 0 0;
            }
            100% {
                background-position: 60px 60px;
            }
        }
        
        @keyframes linePulse {
            0%, 100% {
                opacity: 0.1;
            }
            50% {
                opacity: 0.4;
            }
        }
        
        @media (max-width: 768px) {
            .chat-assistant {
                width: 90vw;
                height: 70vh;
                right: 5vw;
                left: 5vw;
                bottom: 100px;
            }
            
            .chat-toggle {
                right: 20px;
                bottom: 80px;
                width: 60px;
                height: 60px;
                font-size: 1.5rem;
            }
            
            .quick-replies.enhanced {
                grid-template-columns: 1fr;
            }
        }
        
        @media (max-width: 480px) {
            .chat-assistant {
                width: 95vw;
                height: 75vh;
                right: 2.5vw;
                left: 2.5vw;
                bottom: 90px;
            }
            
            .message-content {
                max-width: 85%;
            }
        }
    `;
    
    const styleSheet = document.createElement('style');
    styleSheet.textContent = chatStyles;
    document.head.appendChild(styleSheet);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
function closeChatAssistant() {
    const chatAssistant = document.getElementById('chat-assistant');
    if (chatAssistant) {
        chatAssistant.classList.remove('active');
        setTimeout(() => {
            chatAssistant.style.display = 'none';
        }, 300);
    }
}

function addMessage(text, sender) {
    const chatMessages = document.getElementById('chatMessages');
    if (!chatMessages) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    const avatar = sender === 'user' ? 
        '<i class="fas fa-user"></i>' : 
        '<i class="fas fa-robot"></i>';
    
    messageDiv.innerHTML = `
        <div class="message-avatar">
            ${avatar}
        </div>
        <div class="message-content">
            <p>${text}</p>
            <div class="message-time">${getCurrentTime()}</div>
        </div>
    `;
    
    chatMessages.appendChild(messageDiv);
    scrollChatToBottom();
}

function showTypingIndicator() {
    const chatMessages = document.getElementById('chatMessages');
    if (!chatMessages) return;
    
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message bot-message';
    typingDiv.id = 'typing-indicator';
    
    typingDiv.innerHTML = `
        <div class="message-avatar">
            <i class="fas fa-robot"></i>
        </div>
        <div class="message-content">
            <div class="typing-indicator">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        </div>
    `;
    
    chatMessages.appendChild(typingDiv);
    scrollChatToBottom();
}

function removeTypingIndicator() {
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

function scrollChatToBottom() {
    const chatMessages = document.getElementById('chatMessages');
    if (chatMessages) {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
function addEnhancedQuickReplies() {
    const chatMessages = document.getElementById('chatMessages');
    if (!chatMessages) return;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
    const existingReplies = chatMessages.querySelector('.quick-replies.enhanced');
    if (existingReplies) {
        existingReplies.remove();
    }
    
    const quickReplies = [
        { text: "üíª –û –Ω–∞–≤—ã–∫–∞—Ö", icon: "fas fa-code" },
        { text: "üöÄ –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", icon: "fas fa-briefcase" },
        { text: "üìà –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", icon: "fas fa-history" },
        { text: "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", icon: "fas fa-phone" },
        { text: "üéØ –£—Å–ª—É–≥–∏", icon: "fas fa-cogs" },
        { text: "üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", icon: "fas fa-tools" },
        { text: "üéµ –ú—É–∑—ã–∫–∞", icon: "fas fa-music" },
        { text: "‚ùì –ü–æ–º–æ—â—å", icon: "fas fa-question" }
    ];
    
    const quickRepliesDiv = document.createElement('div');
    quickRepliesDiv.className = 'quick-replies enhanced';
    
    quickReplies.forEach(reply => {
        const button = document.createElement('button');
        button.className = 'quick-reply enhanced';
        button.innerHTML = `<i class="${reply.icon}"></i> ${reply.text}`;
        button.addEventListener('click', () => {
            handleQuickReply(reply.text);
        });
        
        quickRepliesDiv.appendChild(button);
    });
    
    chatMessages.appendChild(quickRepliesDiv);
    scrollChatToBottom();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
function handleQuickReply(replyText) {
    addMessage(replyText, 'user');
    showTypingIndicator();
    
    setTimeout(() => {
        removeTypingIndicator();
        const response = generateEnhancedAIResponse(replyText);
        addMessage(response, 'bot');
        scrollChatToBottom();
    }, 800);
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π AI –æ—Ç–≤–µ—Ç
function generateEnhancedAIResponse(userMessage) {
    const message = userMessage.toLowerCase();
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
    const responses = {
        skills: `üíª **–ú–æ–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏**:

üé® **Frontend Development:**
‚Ä¢ HTML5/CSS3 (95%) - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å—Ç–∫–∞, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
‚Ä¢ JavaScript (90%) - ES6+, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–¥—É–ª–∏
‚Ä¢ React (85%) - –•—É–∫–∏, Context API, React Router, Redux
‚Ä¢ Svelte (70%) - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫

üõ† **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**
‚Ä¢ TypeScript (75%) - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
‚Ä¢ SASS/SCSS (80%) - –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã CSS
‚Ä¢ Webpack/Vite (70%) - –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ Git (85%) - –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–µ—Ä—Å–∏–π
‚Ä¢ Figma (75%) - UI/UX –¥–∏–∑–∞–π–Ω –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ

üöÄ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:**
‚Ä¢ PWA (65%) - –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ SEO (70%) - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
‚Ä¢ Performance (75%) - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`,

        projects: `üöÄ **–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã**:

üè™ **Moscow RP** - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –¥–ª—è GTA 5 RP
‚Ä¢ **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏**: HTML5, CSS3, JavaScript, Responsive Design
‚Ä¢ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**: –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
‚Ä¢ **–°—Å—ã–ª–∫–∞**: [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç](${getDefaultProjects()[0].demoLink})

üì± **Pyrometer** - –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏**: React, Node.js, WebSocket, REST API
‚Ä¢ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**: –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ **–°—Å—ã–ª–∫–∞**: [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç](${getDefaultProjects()[1].demoLink})

üé® **Astra GTA 5 RP** - UI/UX –¥–∏–∑–∞–π–Ω
‚Ä¢ **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã**: Figma, Adobe XD, Prototyping
‚Ä¢ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ flow, –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞
‚Ä¢ **–°—Å—ã–ª–∫–∞**: [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç](${getDefaultProjects()[2].demoLink})`,

        experience: `üìà **–ú–æ–π –æ–ø—ã—Ç**:

‚è≥ **2+ –≥–æ–¥–∞** –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
‚úÖ **15+ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤** —Ä–∞–∑–ª–∏—á–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
üë• **8+ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤** –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
üéØ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è**: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

üíº **–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ SPA –∏ PWA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
‚Ä¢ UI/UX –¥–∏–∑–∞–π–Ω –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å REST API`,

        contact: `üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏**:

üìß **Email**: districkov@yandex.ru
‚úàÔ∏è **Telegram**: @districkov
üíª **GitHub**: github.com/Districkov

üìç **–õ–æ–∫–∞—Ü–∏—è**: –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è
üïí **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å**: –í —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
üí¨ **–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏**: Telegram –∏–ª–∏ Email

üìã **–ì–æ—Ç–æ–≤ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é:**
‚Ä¢ –ù–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
‚Ä¢ –§—Ä–∏–ª–∞–Ω—Å –∑–∞–∫–∞–∑–æ–≤`,

        services: `üéØ **–ú–æ–∏ —É—Å–ª—É–≥–∏**:

üíª **–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ –∫–ª—é—á**
–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

üì± **–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞**
–ò–¥–µ–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏ –±—Ä–∞—É–∑–µ—Ä–∞—Ö

üé® **UI/UX –î–∏–∑–∞–π–Ω**
–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã—Ö –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤

‚ö° **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**
–£—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞

üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**
–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

üìä **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏**
–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π`,

        technology: `üõ† **–ú–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫**:

**Frontend:**
‚Ä¢ HTML5, CSS3, JavaScript (ES6+)
‚Ä¢ React, Svelte, TypeScript
‚Ä¢ Redux, Context API, React Router

**Styling:**
‚Ä¢ CSS Modules, Styled Components
‚Ä¢ SASS/SCSS, Tailwind CSS
‚Ä¢ Bootstrap, Material-UI

**Tools & Other:**
‚Ä¢ Git, Webpack, Vite
‚Ä¢ Figma, Adobe XD
‚Ä¢ REST API, GraphQL
‚Ä¢ Jest, Testing Library

**Methodologies:**
‚Ä¢ –ë–≠–ú, Mobile First
‚Ä¢ Responsive Design
‚Ä¢ Component-Driven Development`,

        music: `üéµ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π**:

–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–æ–π —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞:

üîä **–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ** - –∫–Ω–æ–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π –¥–∏–Ω–∞–º–∏–∫–∞
üéµ **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª**: –ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä, –ø–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
üé∂ **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ**: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏—è—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ

–ú—É–∑—ã–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –±–æ–ª–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º!`,

        help: `‚ùì **–ß—Ç–æ —è —É–º–µ—é**:

‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ **–Ω–∞–≤—ã–∫–∞—Ö** –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö üíª
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å **–ø—Ä–æ–µ–∫—Ç—ã** –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ üöÄ
‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± **–æ–ø—ã—Ç–µ** —Ä–∞–±–æ—Ç—ã üìà
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å **–∫–æ–Ω—Ç–∞–∫—Ç—ã** –¥–ª—è —Å–≤—è–∑–∏ üìû
‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± **—É—Å–ª—É–≥–∞—Ö** üéØ
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å **—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫** üõ†
‚Ä¢ –ü–æ–º–æ—á—å —Å **—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –º—É–∑—ã–∫–æ–π** üéµ

üí° **–°–æ–≤–µ—Ç**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!`
    };
    
    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Ç–∞
    if (message.includes('–Ω–∞–≤—ã–∫') || message.includes('skill') || message.includes('—É–º–µ–Ω–∏–µ') || message.match(/—á—Ç–æ.*—É–º–µ–µ—à—å/)) {
        return responses.skills;
    } else if (message.includes('–ø—Ä–æ–µ–∫—Ç') || message.includes('—Ä–∞–±–æ—Ç') || message.includes('portfolio') || message.includes('–∫–µ–π—Å') || message.includes('moscow') || message.includes('pyrometer') || message.includes('astra')) {
        return responses.projects;
    } else if (message.includes('–æ–ø—ã—Ç') || message.includes('experience') || message.includes('—Å—Ç–∞–∂') || message.includes('–ª–µ—Ç') || message.includes('–≥–æ–¥')) {
        return responses.experience;
    } else if (message.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || message.includes('—Å–≤—è–∑–∞—Ç—å') || message.includes('contact') || message.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') || message.includes('email') || message.includes('telegram') || message.includes('github')) {
        return responses.contact;
    } else if (message.includes('—É—Å–ª—É–≥') || message.includes('service') || message.includes('–ø—Ä–µ–¥–ª–æ–∂–µ–Ω') || message.includes('–¥–µ–ª–∞–µ—à—å') || message.includes('–ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å')) {
        return responses.services;
    } else if (message.includes('—Ç–µ—Ö–Ω–æ–ª–æ–≥') || message.includes('stack') || message.includes('–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç') || message.includes('–∏—Å–ø–æ–ª—å–∑—É–µ—à—å') || message.includes('–±–∏–±–ª–∏–æ—Ç–µ–∫') || message.includes('—Å—Ç–µ–∫')) {
        return responses.technology;
    } else if (message.includes('–º—É–∑—ã–∫') || message.includes('sound') || message.includes('audio') || message.includes('–∑–≤—É–∫') || message.includes('–ø–ª–µ–µ—Ä')) {
        return responses.music;
    } else if (message.includes('–ø–æ–º–æ—â—å') || message.includes('help') || message.includes('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å') || message.includes('–∫–æ–º–∞–Ω–¥—ã') || message.includes('—Ñ—É–Ω–∫—Ü–∏–∏')) {
        return responses.help;
    } else if (message.includes('–ø—Ä–∏–≤–µ—Ç') || message.includes('hello') || message.includes('hi') || message.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤') || message.includes('–Ω–∞—á–∞—Ç—å') || message.includes('start')) {
        return `–ü—Ä–∏–≤–µ—Ç! üëã 

–Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ **Districk**. –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! 

–Ø –º–æ–≥—É –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ:
‚Ä¢ üíª **–ù–∞–≤—ã–∫–∞—Ö –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö** 
‚Ä¢ üöÄ **–ü—Ä–æ–µ–∫—Ç–∞—Ö –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ**
‚Ä¢ üìà **–û–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã**
‚Ä¢ üìû **–ö–æ–Ω—Ç–∞–∫—Ç–∞—Ö –¥–ª—è —Å–≤—è–∑–∏**
‚Ä¢ üéØ **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö —É—Å–ª—É–≥–∞—Ö**
‚Ä¢ üõ† **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º —Å—Ç–µ–∫–µ**

–¢–∞–∫–∂–µ –º–æ–≥—É –ø–æ–º–æ—á—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –º—É–∑—ã–∫–æ–π üéµ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Å–∞–π—Ç—É.

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?`;
    } else if (message.includes('—Å–ø–∞—Å–∏–±–æ') || message.includes('thanks') || message.includes('thank you') || message.includes('–±–ª–∞–≥–æ–¥–∞—Ä')) {
        return `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä 
–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ" üöÄ

–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚ú®`;
    } else if (message.includes('–ø–æ–∫–∞') || message.includes('bye') || message.includes('–¥–æ —Å–≤–∏–¥–∞–Ω') || message.includes('–≤—ã—Ö–æ–¥') || message.includes('close')) {
        return `–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã 
–ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤ –±—É–¥—É—â–µ–º. –£–¥–∞—á–∏ –≤ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö! 

–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ üìû`;
    } else {
        return `ü§î –ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å.

–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ:
‚Ä¢ üíª –ú–æ–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
‚Ä¢ üöÄ –ü—Ä–æ–µ–∫—Ç–∞—Ö –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ  
‚Ä¢ üìà –û–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã
‚Ä¢ üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üéØ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö —É—Å–ª—É–≥–∞—Ö
‚Ä¢ üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º —Å—Ç–µ–∫–µ
‚Ä¢ üéµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º—É–∑—ã–∫–æ–π –Ω–∞ —Å–∞–π—Ç–µ

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∏–∂–µ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!`;
    }
}

// =============================================
// –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–û–ë–ù–û–í–õ–ï–ù–ù–´–ï)
// =============================================
function loadProjects() {
    const savedProjects = localStorage.getItem('portfolioProjects');
    
    if (savedProjects) {
        try {
            projects = JSON.parse(savedProjects);
            console.log(`üìÅ Loaded ${projects.length} projects from localStorage`);
        } catch (e) {
            console.error('Error loading projects from localStorage:', e);
            projects = getDefaultProjects();
        }
    } else {
        projects = getDefaultProjects();
    }
    
    console.log(`üìÅ Loaded ${projects.length} projects`);
    renderProjects();
}

function getDefaultProjects() {
    return [
        {
            "id": 1,
            "category": "web",
            "title": "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω Moscow RP",
            "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π, —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ GTA 5 RP.",
            "image": "project1.png",
            "demoLink": "https://districkov.github.io/Moscow___RP/",
            "githubLink": "https://github.com/Districkov/Moscow___RP",
            "technologies": ["HTML5", "CSS3", "JavaScript", "Responsive Design"],
            "features": ["–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫", "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω", "–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫", "–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã"],
            "status": "–ó–∞–≤–µ—Ä—à–µ–Ω"
        },
        {
            "id": 2,
            "category": "app", 
            "title": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Pyrometer",
            "description": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
            "image": "project2.png",
            "demoLink": "https://pyrometer.tilda.ws/",
            "githubLink": "",
            "technologies": ["React", "Node.js", "WebSocket", "REST API"],
            "features": ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", "–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–î–∞—à–±–æ—Ä–¥"],
            "status": "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        },
        {
            "id": 3,
            "category": "design",
            "title": "–î–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞ Astra GTA 5 RP", 
            "description": "–°–æ–∑–¥–∞–Ω–∏–µ UI/UX –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ GTA 5 RP —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.",
            "image": "project3.png",
            "demoLink": "https://www.figma.com/design/XbDdfTxHWDtniMplxhkvcu/Astra-Project-%7C-Figma?node-id=310-3098&p=f&t=t1uig8AF5IQqlOv7-0",
            "githubLink": "",
            "technologies": ["Figma", "UI/UX Design", "Prototyping", "Design Systems"],
            "features": ["–î–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞", "–ü—Ä–æ—Ç–æ—Ç–∏–ø—ã", "User Flow", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω", "UI Kit"],
            "status": "–ó–∞–≤–µ—Ä—à–µ–Ω"
        }
    ];
}

function renderProjects() {
    const portfolioGrid = document.getElementById('portfolioGrid');
    if (!portfolioGrid) return;

    portfolioGrid.innerHTML = projects.map(project => `
        <div class="portfolio-item ${project.category}" data-category="${project.category}">
            <div class="portfolio-card">
                <div class="portfolio-img">
                    <img src="images/${project.image}" alt="${project.title}" onerror="this.src='images/default-project.png'">
                    <div class="portfolio-overlay">
                        <div class="project-status ${project.status === '–ó–∞–≤–µ—Ä—à–µ–Ω' ? 'completed' : 'in-progress'}">
                            ${project.status}
                        </div>
                        <div class="portfolio-links">
                            ${project.demoLink ? `<a href="${project.demoLink}" target="_blank" class="portfolio-link" title="–î–µ–º–æ"><i class="fas fa-external-link-alt"></i></a>` : ''}
                            ${project.githubLink ? `<a href="${project.githubLink}" target="_blank" class="portfolio-link" title="GitHub"><i class="fab fa-github"></i></a>` : ''}
                            <a href="#" class="portfolio-link view-details" data-project="${project.id}" title="–ü–æ–¥—Ä–æ–±–Ω–µ–µ"><i class="fas fa-eye"></i></a>
                        </div>
                    </div>
                </div>
                <div class="portfolio-content">
                    <span class="portfolio-category">${getCategoryName(project.category)}</span>
                    <h3>${project.title}</h3>
                    <p>${project.description}</p>
                    <div class="portfolio-tech">
                        ${project.technologies.slice(0, 4).map(tech => `<span class="tech-tag">${tech}</span>`).join('')}
                        ${project.technologies.length > 4 ? `<span class="tech-tag-more">+${project.technologies.length - 4}</span>` : ''}
                    </div>
                </div>
            </div>
        </div>
    `).join('');

    initProjectFilter();
    initProjectDetails();
}

function getCategoryName(category) {
    const names = {
        web: 'üåê –í–µ–±-—Å–∞–π—Ç',
        app: 'üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 
        design: 'üé® –î–∏–∑–∞–π–Ω'
    };
    return names[category] || category;
}

function initProjectFilter() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const portfolioItems = document.querySelectorAll('.portfolio-item');

    filterBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
            btn.style.transform = 'scale(0.95)';
            setTimeout(() => {
                btn.style.transform = 'scale(1)';
            }, 150);
            
            filterBtns.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            const filterValue = btn.getAttribute('data-filter');
            
            portfolioItems.forEach(item => {
                if (filterValue === 'all' || item.getAttribute('data-category') === filterValue) {
                    item.style.display = 'block';
                    setTimeout(() => {
                        item.style.opacity = '1';
                        item.style.transform = 'translateY(0) scale(1)';
                    }, 100);
                } else {
                    item.style.opacity = '0';
                    item.style.transform = 'translateY(20px) scale(0.95)';
                    setTimeout(() => {
                        item.style.display = 'none';
                    }, 300);
                }
            });
        });
    });
}

function initProjectDetails() {
    document.addEventListener('click', function(e) {
        if (e.target.closest('.view-details')) {
            e.preventDefault();
            const projectId = parseInt(e.target.closest('.view-details').getAttribute('data-project'));
            showProjectDetails(projectId);
        }
    });
}

function showProjectDetails(projectId) {
    const project = projects.find(p => p.id === projectId);
    if (!project) return;

    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content">
            <span class="modal-close">&times;</span>
            <div class="modal-header">
                <div class="project-meta">
                    <span class="project-category">${getCategoryName(project.category)}</span>
                    <span class="project-status-badge ${project.status === '–ó–∞–≤–µ—Ä—à–µ–Ω' ? 'completed' : 'in-progress'}">${project.status}</span>
                </div>
                <h2>${project.title}</h2>
            </div>
            <div class="modal-body">
                <div class="project-image">
                    <img src="images/${project.image}" alt="${project.title}" onerror="this.src='images/default-project.png'">
                </div>
                <div class="project-info">
                    <div class="project-description">
                        <h3>üìã –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</h3>
                        <p>${project.description}</p>
                    </div>
                    <div class="project-technologies">
                        <h3>üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h3>
                        <div class="tech-tags">
                            ${project.technologies.map(tech => `<span class="tech-tag">${tech}</span>`).join('')}
                        </div>
                    </div>
                    <div class="project-features">
                        <h3>‚≠ê –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h3>
                        <ul>
                            ${project.features.map(feature => `<li>${feature}</li>`).join('')}
                        </ul>
                    </div>
                    <div class="project-links">
                        ${project.demoLink ? `<a href="${project.demoLink}" target="_blank" class="btn btn-primary"><i class="fas fa-external-link-alt"></i> –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ</a>` : ''}
                        ${project.githubLink ? `<a href="${project.githubLink}" target="_blank" class="btn btn-outline"><i class="fab fa-github"></i> –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥</a>` : ''}
                    </div>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    document.body.style.overflow = 'hidden';

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        modal.style.opacity = '1';
    }, 10);

    modal.querySelector('.modal-close').addEventListener('click', () => {
        closeModal(modal);
    });

    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal(modal);
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    document.addEventListener('keydown', function closeOnEscape(e) {
        if (e.key === 'Escape') {
            closeModal(modal);
            document.removeEventListener('keydown', closeOnEscape);
        }
    });
}

function closeModal(modal) {
    modal.style.opacity = '0';
    setTimeout(() => {
        modal.remove();
        document.body.style.overflow = '';
    }, 300);
}

// =============================================
// –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ú–£–ó–´–ö–ò
// =============================================
function initMusic() {
    const musicToggle = document.getElementById('musicToggle');
    const backgroundMusic = document.getElementById('backgroundMusic');
    
    if (!musicToggle || !backgroundMusic) {
        console.warn('Music elements not found');
        CONFIG.musicEnabled = false;
        return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const musicSettings = JSON.parse(localStorage.getItem('portfolioMusicSettings') || '{"enabled":true,"volume":0.4}');
    CONFIG.musicEnabled = musicSettings.enabled;
    
    backgroundMusic.volume = musicSettings.volume;
    backgroundMusic.loop = true;

    function updateMusicIcon() {
        const icon = musicToggle.querySelector('i');
        if (CONFIG.musicEnabled) {
            icon.className = 'fas fa-volume-up';
            musicToggle.style.background = 'linear-gradient(135deg, var(--primary), #6be000)';
        } else {
            icon.className = 'fas fa-volume-mute';
            musicToggle.style.background = 'linear-gradient(135deg, #666, #888)';
        }
    }

    function toggleMusic() {
        CONFIG.musicEnabled = !CONFIG.musicEnabled;
        
        if (CONFIG.musicEnabled) {
            backgroundMusic.play().catch(e => {
                console.log('Autoplay prevented, waiting for user interaction');
            });
            showMusicNotification('–§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ üéµ', true);
        } else {
            backgroundMusic.pause();
            showMusicNotification('–ú—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ üîá', false);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const musicSettings = {
            enabled: CONFIG.musicEnabled,
            volume: backgroundMusic.volume
        };
        localStorage.setItem('portfolioMusicSettings', JSON.stringify(musicSettings));
        
        updateMusicIcon();
    }

    musicToggle.addEventListener('click', toggleMusic);

    // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –º—É–∑—ã–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
    if (CONFIG.musicEnabled) {
        document.addEventListener('click', function startMusicOnInteraction() {
            backgroundMusic.play().catch(e => {
                console.log('Autoplay prevented');
            });
            document.removeEventListener('click', startMusicOnInteraction);
        }, { once: true });
    }

    updateMusicIcon();
    console.log('üéµ Music system initialized');
}

function initBottomMusicButton() {
    if (!document.getElementById('musicToggle')) {
        const musicButton = document.createElement('button');
        musicButton.id = 'musicToggle';
        musicButton.className = 'music-toggle-bottom';
        musicButton.innerHTML = '<i class="fas fa-volume-up"></i>';
        musicButton.title = '–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É';
        
        musicButton.style.cssText = `
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--primary), #6be000);
            border: none;
            color: var(--dark);
            font-size: 1.3rem;
            cursor: pointer;
            z-index: 100;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            box-shadow: 0 6px 20px rgba(124, 252, 0, 0.4);
        `;

        musicButton.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.15) rotate(5deg)';
            this.style.boxShadow = '0 8px 25px rgba(124, 252, 0, 0.6)';
        });

        musicButton.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1) rotate(0deg)';
            this.style.boxShadow = '0 6px 20px rgba(124, 252, 0, 0.4)';
        });

        document.body.appendChild(musicButton);

        musicButton.addEventListener('click', function() {
            const music = document.getElementById('backgroundMusic');
            if (!music) return;

            CONFIG.musicEnabled = !CONFIG.musicEnabled;
            
            if (CONFIG.musicEnabled) {
                music.play().catch(e => console.log('Autoplay prevented:', e));
                this.innerHTML = '<i class="fas fa-volume-up"></i>';
                this.style.background = 'linear-gradient(135deg, var(--primary), #6be000)';
                showMusicNotification('–§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ üéµ', true);
            } else {
                music.pause();
                this.innerHTML = '<i class="fas fa-volume-mute"></i>';
                this.style.background = 'linear-gradient(135deg, #666, #888)';
                showMusicNotification('–ú—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ üîá', false);
            }
            
            const musicSettings = {
                enabled: CONFIG.musicEnabled,
                volume: music.volume
            };
            localStorage.setItem('portfolioMusicSettings', JSON.stringify(musicSettings));
        });

        console.log('‚úÖ Bottom music button initialized');
    }
}

// =============================================
// –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø)
// =============================================
function showNotification(message, type = 'info') {
    removeExistingNotifications();
    
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    
    const icons = {
        success: 'fas fa-check-circle',
        error: 'fas fa-exclamation-circle',
        info: 'fas fa-info-circle',
        warning: 'fas fa-exclamation-triangle'
    };
    
    const icon = icons[type] || icons.info;
    
    notification.innerHTML = `
        <div class="notification-content">
            <div class="notification-icon">
                <i class="${icon}"></i>
            </div>
            <div class="notification-message">
                <div class="notification-title">${getNotificationTitle(type)}</div>
                <div class="notification-text">${message}</div>
            </div>
            <button class="notification-close">
                <i class="fas fa-times"></i>
            </button>
            <div class="notification-progress"></div>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    const progressBar = notification.querySelector('.notification-progress');
    if (progressBar) {
        setTimeout(() => {
            progressBar.style.width = '0%';
        }, 100);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É
    notification.querySelector('.notification-close').addEventListener('click', () => {
        closeNotification(notification);
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentElement) {
            closeNotification(notification);
        }
    }, 5000);
}

function getNotificationTitle(type) {
    const titles = {
        success: '–£—Å–ø–µ—à–Ω–æ!',
        error: '–û—à–∏–±–∫–∞!',
        info: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        warning: '–í–Ω–∏–º–∞–Ω–∏–µ!'
    };
    return titles[type] || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
}

function closeNotification(notification) {
    notification.classList.remove('show');
    notification.classList.add('hide');
    
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 300);
}

function removeExistingNotifications() {
    const existing = document.querySelectorAll('.notification');
    existing.forEach(notification => {
        if (!notification.classList.contains('show')) {
            notification.remove();
        }
    });
}

function showMusicNotification(message, isPlaying) {
    const notification = document.createElement('div');
    notification.className = 'notification notification-music';
    
    const icon = isPlaying ? 'fas fa-volume-up' : 'fas fa-volume-mute';
    const title = isPlaying ? '–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞' : '–ú—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞';
    
    notification.innerHTML = `
        <div class="notification-content">
            <div class="notification-icon">
                <i class="${icon}"></i>
            </div>
            <div class="notification-message">
                <div class="notification-title">üéµ ${title}</div>
                <div class="notification-text">${message}</div>
            </div>
            <button class="notification-close">
                <i class="fas fa-times"></i>
            </button>
            <div class="notification-progress"></div>
        </div>
    `;
    
    showCustomNotification(notification);
}

function showWelcomeNotification() {
    const notification = document.createElement('div');
    notification.className = 'notification notification-info';
    
    notification.innerHTML = `
        <div class="notification-content">
            <div class="notification-icon">
                <i class="fas fa-rocket"></i>
            </div>
            <div class="notification-message">
                <div class="notification-title">üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</div>
                <div class="notification-text">–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –º–æ–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ! –ß–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.</div>
            </div>
            <button class="notification-close">
                <i class="fas fa-times"></i>
            </button>
            <div class="notification-progress"></div>
        </div>
    `;
    
    showCustomNotification(notification);
}

function showCustomNotification(notificationElement) {
    document.body.appendChild(notificationElement);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notificationElement.classList.add('show');
    }, 10);
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    const progressBar = notificationElement.querySelector('.notification-progress');
    if (progressBar) {
        setTimeout(() => {
            progressBar.style.width = '0%';
        }, 100);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É
    notificationElement.querySelector('.notification-close').addEventListener('click', () => {
        closeNotification(notificationElement);
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        if (notificationElement.parentElement) {
            closeNotification(notificationElement);
        }
    }, 5000);
}

// =============================================
// –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
// =============================================
function initTheme() {
    const savedTheme = localStorage.getItem('portfolioTheme') || 'dark';
    setTheme(savedTheme);
    
    const themeToggle = document.getElementById('themeToggle');
    if (themeToggle) {
        themeToggle.addEventListener('click', toggleTheme);
        updateThemeIcon(savedTheme);
    }
}

function toggleTheme() {
    const newTheme = document.documentElement.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
    setTheme(newTheme);
    showNotification(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newTheme === 'dark' ? '—Ç—ë–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é'}`, 'info');
}

function setTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('portfolioTheme', theme);
    updateThemeIcon(theme);
}

function updateThemeIcon(theme) {
    const icon = document.querySelector('#themeToggle i');
    if (icon) {
        icon.className = theme === 'dark' ? 'fas fa-moon' : 'fas fa-sun';
    }
}

function initAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate-in');
            }
        });
    }, observerOptions);

    document.querySelectorAll('.fade-in, .service-card, .portfolio-item, .skill-item').forEach(el => {
        observer.observe(el);
    });

    initCounters();
    initSkillsAnimation();
}

function initCounters() {
    const counters = document.querySelectorAll('.counter');
    
    const counterObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const counter = entry.target;
                const target = +counter.getAttribute('data-target');
                const duration = 2000;
                const step = target / (duration / 16);
                let current = 0;
                
                const updateCounter = () => {
                    current += step;
                    if (current < target) {
                        counter.textContent = Math.ceil(current);
                        requestAnimationFrame(updateCounter);
                    } else {
                        counter.textContent = target;
                    }
                };
                
                updateCounter();
                counterObserver.unobserve(counter);
            }
        });
    }, { threshold: 0.5 });
    
    counters.forEach(counter => counterObserver.observe(counter));
}

function initSkillsAnimation() {
    const skillBars = document.querySelectorAll('.skill-progress');
    
    const skillsObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const skillBar = entry.target;
                const width = skillBar.getAttribute('data-width');
                skillBar.style.width = width + '%';
                skillsObserver.unobserve(skillBar);
            }
        });
    }, { threshold: 0.3 });
    
    skillBars.forEach(bar => skillsObserver.observe(bar));
}

function initPageProgress() {
    const progressBar = document.querySelector('.progress-bar');
    if (!progressBar) return;

    window.addEventListener('scroll', () => {
        const windowHeight = window.innerHeight;
        const documentHeight = document.documentElement.scrollHeight - windowHeight;
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const progress = (scrollTop / documentHeight) * 100;
        
        progressBar.style.width = progress + '%';
    });
}

function initEventListeners() {
    initNavigation();
    initContactForm();
    
    window.addEventListener('load', () => {
        setTimeout(() => {
            const preloader = document.getElementById('preloader');
            if (preloader) {
                preloader.style.opacity = '0';
                setTimeout(() => {
                    preloader.style.display = 'none';
                }, 500);
            }
        }, 1000);
    });
}

function initNavigation() {
    const menuBtn = document.getElementById('mobileMenuBtn');
    const navbar = document.getElementById('navbar');
    
    if (menuBtn && navbar) {
        menuBtn.addEventListener('click', () => {
            navbar.classList.toggle('active');
            menuBtn.innerHTML = navbar.classList.contains('active') 
                ? '<i class="fas fa-times"></i>' 
                : '<i class="fas fa-bars"></i>';
        });
    }

    const sections = document.querySelectorAll('section');
    const navLinks = document.querySelectorAll('.nav-link');

    window.addEventListener('scroll', () => {
        let current = '';
        
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.clientHeight;
            
            if (pageYOffset >= sectionTop - 200) {
                current = section.getAttribute('id');
            }
        });

        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${current}`) {
                link.classList.add('active');
            }
        });
    });

    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            if (targetId === '#') return;
            
            const target = document.querySelector(targetId);
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
                
                if (navbar && navbar.classList.contains('active')) {
                    navbar.classList.remove('active');
                    menuBtn.innerHTML = '<i class="fas fa-bars"></i>';
                }
            }
        });
    });
}

function initContactForm() {
    const contactForm = document.getElementById('contactForm');
    if (!contactForm) return;

    contactForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = {
            name: document.getElementById('name').value.trim(),
            email: document.getElementById('email').value.trim(),
            message: document.getElementById('message').value.trim()
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!formData.name || !formData.email || !formData.message) {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã', 'error');
            return;
        }

        if (!isValidEmail(formData.email)) {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å', 'error');
            return;
        }

        console.log('Contact form submitted:', formData);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        this.reset();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            showNotification('–û–±—ã—á–Ω–æ —è –æ—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è', 'info');
        }, 2000);
    });
}

function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// =============================================
// –î–û–ë–ê–í–õ–ï–ù–ò–ï CSS –°–¢–ò–õ–ï–ô
// =============================================
const additionalStyles = `
    @keyframes enhancedFloat {
        0%, 100% {
            transform: translateY(0) translateX(0) rotate(0deg);
        }
        25% {
            transform: translateY(-40px) translateX(20px) rotate(90deg);
        }
        50% {
            transform: translateY(-20px) translateX(40px) rotate(180deg);
        }
        75% {
            transform: translateY(-30px) translateX(-20px) rotate(270deg);
        }
    }
    
    @keyframes pulseCircle {
        0% {
            transform: scale(0.8);
            opacity: 0;
        }
        50% {
            opacity: 0.4;
        }
        100% {
            transform: scale(2.5);
            opacity: 0;
        }
    }
    
    @keyframes gridMove {
        0% {
            background-position: 0 0;
        }
        100% {
            background-position: 60px 60px;
        }
    }
    
    @keyframes linePulse {
        0%, 100% {
            opacity: 0.1;
        }
        50% {
            opacity: 0.4;
        }
    }
    
    .project-status {
        position: absolute;
        top: 15px;
        left: 15px;
        padding: 5px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
        z-index: 2;
    }
    
    .project-status.completed {
        background: rgba(0, 210, 106, 0.2);
        color: #00d26a;
        border: 1px solid rgba(0, 210, 106, 0.3);
    }
    
    .project-status.in-progress {
        background: rgba(255, 159, 67, 0.2);
        color: #ff9f43;
        border: 1px solid rgba(255, 159, 67, 0.3);
    }
    
    .project-status-badge {
        padding: 5px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
    }
    
    .project-status-badge.completed {
        background: rgba(0, 210, 106, 0.2);
        color: #00d26a;
        border: 1px solid rgba(0, 210, 106, 0.3);
    }
    
    .project-status-badge.in-progress {
        background: rgba(255, 159, 67, 0.2);
        color: #ff9f43;
        border: 1px solid rgba(255, 159, 67, 0.3);
    }
    
    .tech-tag-more {
        background: rgba(124, 252, 0, 0.1);
        color: var(--primary);
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
        border: 1px solid rgba(124, 252, 0, 0.2);
        cursor: help;
    }
    
    .project-meta {
        display: flex;
        gap: 10px;
        align-items: center;
        margin-bottom: 10px;
    }
    
    .btn-primary {
        background: linear-gradient(135deg, var(--primary), #6be000);
        color: var(--dark);
        border: none;
    }
    
    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(124, 252, 0, 0.4);
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const styleSheet = document.createElement('style');
styleSheet.textContent = additionalStyles;
document.head.appendChild(styleSheet);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function testNotifications() {
    showNotification('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'info');
    setTimeout(() => showNotification('–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success'), 600);
    setTimeout(() => showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', 'error'), 1200);
    setTimeout(() => showNotification('–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', 'warning'), 1800);
    setTimeout(() => showAchievementNotification('–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!', '–í—ã –≤–ø–µ—Ä–≤—ã–µ –ø–æ—Å–µ—Ç–∏–ª–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'), 2400);
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.testNotifications = testNotifications;

console.log('üé® Enhanced portfolio application loaded successfully!');